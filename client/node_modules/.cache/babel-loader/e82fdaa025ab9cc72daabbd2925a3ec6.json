{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/**\n *  Copyright (c) 2015-present, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n *   strict\n */\n\n\nexports.parseBody = parseBody;\n\nvar _contentType = require('content-type');\n\nvar _contentType2 = _interopRequireDefault(_contentType);\n\nvar _rawBody = require('raw-body');\n\nvar _rawBody2 = _interopRequireDefault(_rawBody);\n\nvar _httpErrors = require('http-errors');\n\nvar _httpErrors2 = _interopRequireDefault(_httpErrors);\n\nvar _querystring = require('querystring');\n\nvar _querystring2 = _interopRequireDefault(_querystring);\n\nvar _zlib = require('zlib');\n\nvar _zlib2 = _interopRequireDefault(_zlib);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Provided a \"Request\" provided by express or connect (typically a node style\n * HTTPClientRequest), Promise the body data contained.\n */\n\n\nfunction parseBody(req) {\n  return new Promise(function (resolve, reject) {\n    var body = req.body; // If express has already parsed a body as a keyed object, use it.\n\n    if ((typeof body === 'undefined' ? 'undefined' : _typeof(body)) === 'object' && !(body instanceof Buffer)) {\n      return resolve(body);\n    } // Skip requests without content types.\n\n\n    if (req.headers['content-type'] === undefined) {\n      return resolve({});\n    }\n\n    var typeInfo = _contentType2.default.parse(req); // If express has already parsed a body as a string, and the content-type\n    // was application/graphql, parse the string body.\n\n\n    if (typeof body === 'string' && typeInfo.type === 'application/graphql') {\n      return resolve(graphqlParser(body));\n    } // Already parsed body we didn't recognise? Parse nothing.\n\n\n    if (body) {\n      return resolve({});\n    } // Use the correct body parser based on Content-Type header.\n\n\n    switch (typeInfo.type) {\n      case 'application/graphql':\n        return read(req, typeInfo, graphqlParser, resolve, reject);\n\n      case 'application/json':\n        return read(req, typeInfo, jsonEncodedParser, resolve, reject);\n\n      case 'application/x-www-form-urlencoded':\n        return read(req, typeInfo, urlEncodedParser, resolve, reject);\n    } // If no Content-Type header matches, parse nothing.\n\n\n    return resolve({});\n  });\n}\n\nfunction jsonEncodedParser(body) {\n  if (jsonObjRegex.test(body)) {\n    /* eslint-disable no-empty */\n    try {\n      return JSON.parse(body);\n    } catch (error) {} // Do nothing\n\n    /* eslint-enable no-empty */\n\n  }\n\n  throw (0, _httpErrors2.default)(400, 'POST body sent invalid JSON.');\n}\n\nfunction urlEncodedParser(body) {\n  return _querystring2.default.parse(body);\n}\n\nfunction graphqlParser(body) {\n  return {\n    query: body\n  };\n}\n/**\n * RegExp to match an Object-opening brace \"{\" as the first non-space\n * in a string. Allowed whitespace is defined in RFC 7159:\n *\n *     x20  Space\n *     x09  Horizontal tab\n *     x0A  Line feed or New line\n *     x0D  Carriage return\n */\n\n\nvar jsonObjRegex = /^[\\x20\\x09\\x0a\\x0d]*\\{/; // Read and parse a request body.\n\nfunction read(req, typeInfo, parseFn, resolve, reject) {\n  var charset = (typeInfo.parameters.charset || 'utf-8').toLowerCase(); // Assert charset encoding per JSON RFC 7159 sec 8.1\n\n  if (charset.slice(0, 4) !== 'utf-') {\n    throw (0, _httpErrors2.default)(415, 'Unsupported charset \"' + charset.toUpperCase() + '\".');\n  } // Get content-encoding (e.g. gzip)\n\n\n  var contentEncoding = req.headers['content-encoding'];\n  var encoding = typeof contentEncoding === 'string' ? contentEncoding.toLowerCase() : 'identity';\n  var length = encoding === 'identity' ? req.headers['content-length'] : null;\n  var limit = 100 * 1024; // 100kb\n\n  var stream = decompressed(req, encoding); // Read body from stream.\n\n  (0, _rawBody2.default)(stream, {\n    encoding: charset,\n    length: length,\n    limit: limit\n  }, function (err, body) {\n    if (err) {\n      return reject(err.type === 'encoding.unsupported' ? (0, _httpErrors2.default)(415, 'Unsupported charset \"' + charset.toUpperCase() + '\".') : (0, _httpErrors2.default)(400, 'Invalid body: ' + err.message + '.'));\n    }\n\n    try {\n      // Decode and parse body.\n      return resolve(parseFn(body));\n    } catch (error) {\n      return reject(error);\n    }\n  });\n} // Return a decompressed stream, given an encoding.\n\n\nfunction decompressed(req, encoding) {\n  switch (encoding) {\n    case 'identity':\n      return req;\n\n    case 'deflate':\n      return req.pipe(_zlib2.default.createInflate());\n\n    case 'gzip':\n      return req.pipe(_zlib2.default.createGunzip());\n  }\n\n  throw (0, _httpErrors2.default)(415, 'Unsupported content-encoding \"' + encoding + '\".');\n}","map":{"version":3,"sources":["/Users/jonhyun/Desktop/Dev/BeerMontreal/node_modules/express-graphql/dist/parseBody.js"],"names":["Object","defineProperty","exports","value","_typeof","Symbol","iterator","obj","constructor","prototype","parseBody","_contentType","require","_contentType2","_interopRequireDefault","_rawBody","_rawBody2","_httpErrors","_httpErrors2","_querystring","_querystring2","_zlib","_zlib2","__esModule","default","req","Promise","resolve","reject","body","Buffer","headers","undefined","typeInfo","parse","type","graphqlParser","read","jsonEncodedParser","urlEncodedParser","jsonObjRegex","test","JSON","error","query","parseFn","charset","parameters","toLowerCase","slice","toUpperCase","contentEncoding","encoding","length","limit","stream","decompressed","err","message","pipe","createInflate","createGunzip"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               *  Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *  All rights reserved.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               *  This source code is licensed under the BSD-style license found in the\n                                                                                                                                                                                                                                                                               *  LICENSE file in the root directory of this source tree. An additional grant\n                                                                                                                                                                                                                                                                               *  of patent rights can be found in the PATENTS file in the same directory.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               *   strict\n                                                                                                                                                                                                                                                                               */\n\nexports.parseBody = parseBody;\n\nvar _contentType = require('content-type');\n\nvar _contentType2 = _interopRequireDefault(_contentType);\n\nvar _rawBody = require('raw-body');\n\nvar _rawBody2 = _interopRequireDefault(_rawBody);\n\nvar _httpErrors = require('http-errors');\n\nvar _httpErrors2 = _interopRequireDefault(_httpErrors);\n\nvar _querystring = require('querystring');\n\nvar _querystring2 = _interopRequireDefault(_querystring);\n\nvar _zlib = require('zlib');\n\nvar _zlib2 = _interopRequireDefault(_zlib);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Provided a \"Request\" provided by express or connect (typically a node style\n * HTTPClientRequest), Promise the body data contained.\n */\nfunction parseBody(req) {\n  return new Promise(function (resolve, reject) {\n    var body = req.body;\n\n    // If express has already parsed a body as a keyed object, use it.\n    if ((typeof body === 'undefined' ? 'undefined' : _typeof(body)) === 'object' && !(body instanceof Buffer)) {\n      return resolve(body);\n    }\n\n    // Skip requests without content types.\n    if (req.headers['content-type'] === undefined) {\n      return resolve({});\n    }\n\n    var typeInfo = _contentType2.default.parse(req);\n\n    // If express has already parsed a body as a string, and the content-type\n    // was application/graphql, parse the string body.\n    if (typeof body === 'string' && typeInfo.type === 'application/graphql') {\n      return resolve(graphqlParser(body));\n    }\n\n    // Already parsed body we didn't recognise? Parse nothing.\n    if (body) {\n      return resolve({});\n    }\n\n    // Use the correct body parser based on Content-Type header.\n    switch (typeInfo.type) {\n      case 'application/graphql':\n        return read(req, typeInfo, graphqlParser, resolve, reject);\n      case 'application/json':\n        return read(req, typeInfo, jsonEncodedParser, resolve, reject);\n      case 'application/x-www-form-urlencoded':\n        return read(req, typeInfo, urlEncodedParser, resolve, reject);\n    }\n\n    // If no Content-Type header matches, parse nothing.\n    return resolve({});\n  });\n}\n\nfunction jsonEncodedParser(body) {\n  if (jsonObjRegex.test(body)) {\n    /* eslint-disable no-empty */\n    try {\n      return JSON.parse(body);\n    } catch (error) {}\n    // Do nothing\n\n    /* eslint-enable no-empty */\n  }\n  throw (0, _httpErrors2.default)(400, 'POST body sent invalid JSON.');\n}\n\nfunction urlEncodedParser(body) {\n  return _querystring2.default.parse(body);\n}\n\nfunction graphqlParser(body) {\n  return { query: body };\n}\n\n/**\n * RegExp to match an Object-opening brace \"{\" as the first non-space\n * in a string. Allowed whitespace is defined in RFC 7159:\n *\n *     x20  Space\n *     x09  Horizontal tab\n *     x0A  Line feed or New line\n *     x0D  Carriage return\n */\nvar jsonObjRegex = /^[\\x20\\x09\\x0a\\x0d]*\\{/;\n\n// Read and parse a request body.\nfunction read(req, typeInfo, parseFn, resolve, reject) {\n  var charset = (typeInfo.parameters.charset || 'utf-8').toLowerCase();\n\n  // Assert charset encoding per JSON RFC 7159 sec 8.1\n  if (charset.slice(0, 4) !== 'utf-') {\n    throw (0, _httpErrors2.default)(415, 'Unsupported charset \"' + charset.toUpperCase() + '\".');\n  }\n\n  // Get content-encoding (e.g. gzip)\n  var contentEncoding = req.headers['content-encoding'];\n  var encoding = typeof contentEncoding === 'string' ? contentEncoding.toLowerCase() : 'identity';\n  var length = encoding === 'identity' ? req.headers['content-length'] : null;\n  var limit = 100 * 1024; // 100kb\n  var stream = decompressed(req, encoding);\n\n  // Read body from stream.\n  (0, _rawBody2.default)(stream, { encoding: charset, length: length, limit: limit }, function (err, body) {\n    if (err) {\n      return reject(err.type === 'encoding.unsupported' ? (0, _httpErrors2.default)(415, 'Unsupported charset \"' + charset.toUpperCase() + '\".') : (0, _httpErrors2.default)(400, 'Invalid body: ' + err.message + '.'));\n    }\n\n    try {\n      // Decode and parse body.\n      return resolve(parseFn(body));\n    } catch (error) {\n      return reject(error);\n    }\n  });\n}\n\n// Return a decompressed stream, given an encoding.\nfunction decompressed(req, encoding) {\n  switch (encoding) {\n    case 'identity':\n      return req;\n    case 'deflate':\n      return req.pipe(_zlib2.default.createInflate());\n    case 'gzip':\n      return req.pipe(_zlib2.default.createGunzip());\n  }\n  throw (0, _httpErrors2.default)(415, 'Unsupported content-encoding \"' + encoding + '\".');\n}"]},"metadata":{},"sourceType":"script"}