{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/jonhyun/Desktop/Dev/BeerMontreal/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/jonhyun/Desktop/Dev/BeerMontreal/client/src/components/Beers.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query BeersQuery {\\n    beers {\\n      abv\\n      available\\n      brewery\\n      ibu\\n      link\\n      name\\n      price\\n      ratings {\\n        name\\n        value\\n      }\\n      style\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component, Fragment, useState, useEffect } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport BeerItem from './BeerItem';\nimport axios from 'axios';\nimport Pagination from './Pagination'; // const BEERS_QUERY = gql`\n//   query BeersQuery($first: Int, $skip: Int, $orderBy: LinkOrderByInput) {\n//     beers(first: $first, skip: $skip, orderBy: $orderBy) {\n//       abv\n//       available\n//       brewery\n//       ibu\n//       link\n//       name\n//       price\n//       ratings {\n//         name\n//         value\n//       }\n//       style\n//     }\n//   }\n// `\n// Allow cross-origin\n\nvar BEERS_QUERY = gql(_templateObject()); // 'https://jsonplaceholder.typicode.com/posts'\n// const LINKS_PER_PAGE = 5\n\nvar Beers = function Beers() {\n  // const [posts, setPosts] = useState([])\n  // const [loading, setLoading] = useState(false)\n  // const [currentPage, setCurrentPage] = useState(1)\n  // const [postsPerPage] = useState(10)\n  // useEffect(() => {\n  //   const fetchPosts = async () => {\n  //     setLoading(true)\n  //     const res = await axios.get('https://jsonplaceholder.typicode.com/posts')\n  //     setPosts(res.data)\n  //     setLoading(false)\n  //   }\n  //   fetchPosts()\n  // }, [])\n  // console.log(posts)\n  // Get current posts\n  var indexOfLastPost = currentPage * postsPerPage;\n  var indexOfFirstPost = indexOfLastPost - postsPerPage; // Change page\n\n  var paginate = function paginate(pageNumber) {\n    return setCurrentPage(pageNumber);\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"display-4 my-3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, \"Beers du Quebec \"), /*#__PURE__*/React.createElement(Query, {\n    query: BEERS_QUERY,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, function (_ref) {\n    var loading = _ref.loading,\n        error = _ref.error,\n        data = _ref.data;\n    if (loading) return /*#__PURE__*/React.createElement(\"h4\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 31\n      }\n    }, \"Loading...\");\n    if (error) console.log(error);\n    var currentPosts = data.beers.slice(indexOfFirstPost, indexOfLastPost);\n    console.log(data.beers);\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, currentPosts.map(function (beer) {\n      return /*#__PURE__*/React.createElement(BeerItem, {\n        key: beer.name,\n        beer: beer,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 17\n        }\n      });\n    }), /*#__PURE__*/React.createElement(Pagination, {\n      postsPerPage: postsPerPage,\n      totalPosts: posts.length,\n      paginate: paginate,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 15\n      }\n    }));\n  }));\n}; // export class Beers extends Component {\n//   _forPafination = (store) => {\n//     const isNewPage = this.props.location.pathname.includes('new')\n//     const page = parseInt(this.props.match.params.page, 10)\n//     const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0\n//     const first = isNewPage ? LINKS_PER_PAGE : 100\n//     const orderBy = isNewPage ? 'createdAt_DESC' : null\n//     const data = store.readQuery({\n//       query: BEERS_QUERY,\n//       variables: { first, skip, orderBy },\n//     })\n//     store.writeQuery({ query: BEERS_QUERY, data })\n//   }\n//   _getQueryVariables = () => {\n//     const page = parseInt(this.props.match.params.page, 10)\n//     const skip = (page - 1) * LINKS_PER_PAGE\n//     const first = LINKS_PER_PAGE\n//     const orderBy = 'createdAt_DESC'\n//     return { first, skip, orderBy }\n//   }\n//   render() {\n//     return (\n//       <Fragment>\n//         <h1 className='display-4 my-3'>Beers du Quebec </h1>\n//         <Query query={BEERS_QUERY} variables={this._getQueryVariables}>\n//           {({ loading, error, data }) => {\n//             if (loading) return <h4>Loading...</h4>\n//             if (error) console.log(error)\n//             return (\n//               <Fragment>\n//                 {data.beers.map((beer) => (\n//                   <BeerItem\n//                     key={beer.name}\n//                     beer={beer}\n//                     forPafination={this._forPafination}\n//                   />\n//                 ))}\n//               </Fragment>\n//             )\n//           }}\n//         </Query>\n//       </Fragment>\n//     )\n//   }\n// }\n\n\nexport default Beers;","map":{"version":3,"sources":["/Users/jonhyun/Desktop/Dev/BeerMontreal/client/src/components/Beers.js"],"names":["React","Component","Fragment","useState","useEffect","gql","Query","BeerItem","axios","Pagination","BEERS_QUERY","Beers","indexOfLastPost","currentPage","postsPerPage","indexOfFirstPost","paginate","pageNumber","setCurrentPage","loading","error","data","console","log","currentPosts","beers","slice","map","beer","name","posts","length"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,QAArC,EAA+CC,SAA/C,QAAgE,OAAhE;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,WAAW,GAAGL,GAAH,mBAAjB,C,CAmBA;AACA;;AAEA,IAAMM,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA,MAAMC,eAAe,GAAGC,WAAW,GAAGC,YAAtC;AACA,MAAMC,gBAAgB,GAAGH,eAAe,GAAGE,YAA3C,CArBkB,CAuBlB;;AACA,MAAME,QAAQ,GAAG,SAAXA,QAAW,CAACC,UAAD;AAAA,WAAgBC,cAAc,CAACD,UAAD,CAA9B;AAAA,GAAjB;;AAEA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAGE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEP,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,gBAA8B;AAAA,QAA3BS,OAA2B,QAA3BA,OAA2B;AAAA,QAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,QAAXC,IAAW,QAAXA,IAAW;AAC7B,QAAIF,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACb,QAAIC,KAAJ,EAAWE,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAEX,QAAMI,YAAY,GAAGH,IAAI,CAACI,KAAL,CAAWC,KAAX,CACnBX,gBADmB,EAEnBH,eAFmB,CAArB;AAIAU,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACI,KAAjB;AAEA,wBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,YAAY,CAACG,GAAb,CAAiB,UAACC,IAAD;AAAA,0BAChB,oBAAC,QAAD;AAAU,QAAA,GAAG,EAAEA,IAAI,CAACC,IAApB;AAA0B,QAAA,IAAI,EAAED,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADgB;AAAA,KAAjB,CADH,eAIE,oBAAC,UAAD;AACE,MAAA,YAAY,EAAEd,YADhB;AAEE,MAAA,UAAU,EAAEgB,KAAK,CAACC,MAFpB;AAGE,MAAA,QAAQ,EAAEf,QAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADF;AAYD,GAvBH,CAHF,CADF;AA+BD,CAzDD,C,CA2DA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeL,KAAf","sourcesContent":["import React, { Component, Fragment, useState, useEffect } from 'react'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\nimport BeerItem from './BeerItem'\nimport axios from 'axios'\nimport Pagination from './Pagination'\n\n// const BEERS_QUERY = gql`\n//   query BeersQuery($first: Int, $skip: Int, $orderBy: LinkOrderByInput) {\n//     beers(first: $first, skip: $skip, orderBy: $orderBy) {\n//       abv\n//       available\n//       brewery\n//       ibu\n//       link\n//       name\n//       price\n//       ratings {\n//         name\n//         value\n//       }\n//       style\n//     }\n//   }\n// `\n// Allow cross-origin\n\nconst BEERS_QUERY = gql`\n  query BeersQuery {\n    beers {\n      abv\n      available\n      brewery\n      ibu\n      link\n      name\n      price\n      ratings {\n        name\n        value\n      }\n      style\n    }\n  }\n`\n\n// 'https://jsonplaceholder.typicode.com/posts'\n// const LINKS_PER_PAGE = 5\n\nconst Beers = () => {\n  // const [posts, setPosts] = useState([])\n  // const [loading, setLoading] = useState(false)\n  // const [currentPage, setCurrentPage] = useState(1)\n  // const [postsPerPage] = useState(10)\n\n  // useEffect(() => {\n  //   const fetchPosts = async () => {\n  //     setLoading(true)\n  //     const res = await axios.get('https://jsonplaceholder.typicode.com/posts')\n  //     setPosts(res.data)\n  //     setLoading(false)\n  //   }\n\n  //   fetchPosts()\n  // }, [])\n\n  // console.log(posts)\n\n  // Get current posts\n  const indexOfLastPost = currentPage * postsPerPage\n  const indexOfFirstPost = indexOfLastPost - postsPerPage\n\n  // Change page\n  const paginate = (pageNumber) => setCurrentPage(pageNumber)\n\n  return (\n    <Fragment>\n      <h1 className='display-4 my-3'>Beers du Quebec </h1>\n\n      <Query query={BEERS_QUERY}>\n        {({ loading, error, data }) => {\n          if (loading) return <h4>Loading...</h4>\n          if (error) console.log(error)\n\n          const currentPosts = data.beers.slice(\n            indexOfFirstPost,\n            indexOfLastPost\n          )\n          console.log(data.beers)\n\n          return (\n            <Fragment>\n              {currentPosts.map((beer) => (\n                <BeerItem key={beer.name} beer={beer} />\n              ))}\n              <Pagination\n                postsPerPage={postsPerPage}\n                totalPosts={posts.length}\n                paginate={paginate}\n              />\n            </Fragment>\n          )\n        }}\n      </Query>\n    </Fragment>\n  )\n}\n\n// export class Beers extends Component {\n//   _forPafination = (store) => {\n//     const isNewPage = this.props.location.pathname.includes('new')\n//     const page = parseInt(this.props.match.params.page, 10)\n\n//     const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0\n//     const first = isNewPage ? LINKS_PER_PAGE : 100\n//     const orderBy = isNewPage ? 'createdAt_DESC' : null\n\n//     const data = store.readQuery({\n//       query: BEERS_QUERY,\n//       variables: { first, skip, orderBy },\n//     })\n\n//     store.writeQuery({ query: BEERS_QUERY, data })\n//   }\n\n//   _getQueryVariables = () => {\n//     const page = parseInt(this.props.match.params.page, 10)\n\n//     const skip = (page - 1) * LINKS_PER_PAGE\n//     const first = LINKS_PER_PAGE\n//     const orderBy = 'createdAt_DESC'\n//     return { first, skip, orderBy }\n//   }\n\n//   render() {\n//     return (\n//       <Fragment>\n//         <h1 className='display-4 my-3'>Beers du Quebec </h1>\n\n//         <Query query={BEERS_QUERY} variables={this._getQueryVariables}>\n//           {({ loading, error, data }) => {\n//             if (loading) return <h4>Loading...</h4>\n//             if (error) console.log(error)\n\n//             return (\n//               <Fragment>\n//                 {data.beers.map((beer) => (\n//                   <BeerItem\n//                     key={beer.name}\n//                     beer={beer}\n//                     forPafination={this._forPafination}\n//                   />\n//                 ))}\n//               </Fragment>\n//             )\n//           }}\n//         </Query>\n//       </Fragment>\n//     )\n//   }\n// }\n\nexport default Beers\n"]},"metadata":{},"sourceType":"module"}