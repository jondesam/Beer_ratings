{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/jonhyun/Desktop/Dev/BeerMontreal/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/jonhyun/Desktop/Dev/BeerMontreal/client/src/components/Beers.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query BeersQuery {\\n    beers {\\n      abv\\n      available\\n      brewery\\n      ibu\\n      link\\n      name\\n      price\\n      ratings {\\n        name\\n        value\\n      }\\n      style\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component, Fragment, useState, useEffect } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport BeerItem from './BeerItem';\nimport axios from 'axios';\nimport Pagination from './Pagination';\nimport InfiniteScroll from 'react-infinite-scroller';\nvar BEERS_QUERY = gql(_templateObject());\nexport var Beers = function Beers() {\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"display-4 my-3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, \"Beers du Quebec \"), /*#__PURE__*/React.createElement(Query, {\n    query: BEERS_QUERY,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, function (_ref) {\n    var loading = _ref.loading,\n        error = _ref.error,\n        data = _ref.data,\n        fetchMore = _ref.fetchMore;\n    if (loading) return /*#__PURE__*/React.createElement(\"h4\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 31\n      }\n    }, \"Loading...\");\n    if (error) console.log(error);\n    {\n      /* console.log('data :', data) */\n    }\n    return /*#__PURE__*/React.createElement(InfiniteScroll, {\n      pageStart: 0,\n      loadMore: loadFunc,\n      hasMore: true || false,\n      loader: /*#__PURE__*/React.createElement(\"div\", {\n        className: \"loader\",\n        key: 0,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }\n      }, \"Loading ...\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }\n    }, data.beers.map(function (beer) {\n      return /*#__PURE__*/React.createElement(BeerItem, {\n        key: beer.name,\n        beer: beer,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 19\n        }\n      });\n    })));\n  }));\n}; // ;<Feed\n//   entries={data.feed || []}\n//   onLoadMore={() =>\n//     fetchMore({\n//       variables: {\n//         offset: data.feed.length,\n//       },\n//       updateQuery: (prev, { fetchMoreResult }) => {\n//         if (!fetchMoreResult) return prev\n//         return Object.assign({}, prev, {\n//           feed: [...prev.feed, ...fetchMoreResult.feed],\n//         })\n//       },\n//     })\n//   }\n// />\n// const FeedWithData = ({ match }) => (\n//   <Query\n//     query={FEED_QUERY}\n//     variables={{\n//       type: match.params.type.toUpperCase() || 'TOP',\n//       offset: 0,\n//       limit: 10,\n//     }}\n//     fetchPolicy='cache-and-network'\n//   >\n//     {({ data, fetchMore }) => (\n//       <Feed\n//         entries={data.feed || []}\n//         onLoadMore={() =>\n//           fetchMore({\n//             variables: {\n//               offset: data.feed.length,\n//             },\n//             updateQuery: (prev, { fetchMoreResult }) => {\n//               if (!fetchMoreResult) return prev\n//               return Object.assign({}, prev, {\n//                 feed: [...prev.feed, ...fetchMoreResult.feed],\n//               })\n//             },\n//           })\n//         }\n//       />\n//     )}\n//   </Query>\n// )\n// export class Beers extends Component {\n//   _forPafination = (store) => {\n//     const isNewPage = this.props.location.pathname.includes('new')\n//     const page = parseInt(this.props.match.params.page, 10)\n//     const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0\n//     const first = isNewPage ? LINKS_PER_PAGE : 100\n//     const orderBy = isNewPage ? 'createdAt_DESC' : null\n//     const data = store.readQuery({\n//       query: BEERS_QUERY,\n//       variables: { first, skip, orderBy },\n//     })\n//     store.writeQuery({ query: BEERS_QUERY, data })\n//   }\n//   _getQueryVariables = () => {\n//     const page = parseInt(this.props.match.params.page, 10)\n//     const skip = (page - 1) * LINKS_PER_PAGE\n//     const first = LINKS_PER_PAGE\n//     const orderBy = 'createdAt_DESC'\n//     return { first, skip, orderBy }\n//   }\n//   render() {\n//     return (\n//       <Fragment>\n//         <h1 className='display-4 my-3'>Beers du Quebec </h1>\n//         <Query query={BEERS_QUERY} variables={this._getQueryVariables}>\n//           {({ loading, error, data }) => {\n//             if (loading) return <h4>Loading...</h4>\n//             if (error) console.log(error)\n//             return (\n//               <Fragment>\n//                 {data.beers.map((beer) => (\n//                   <BeerItem\n//                     key={beer.name}\n//                     beer={beer}\n//                     forPafination={this._forPafination}\n//                   />\n//                 ))}\n//               </Fragment>\n//             )\n//           }}\n//         </Query>\n//       </Fragment>\n//     )\n//   }\n// }\n// export default Beers\n\n{}\n/* <Pagination\npostsPerPage={postsPerPage}\ntotalPosts={posts.length}\npaginate={paginate}\n/> */\n// const Beers = () => {\n//   const [posts, setPosts] = useState([])\n//   const [loading, setLoading] = useState(false)\n//   const [currentPage, setCurrentPage] = useState(1)\n//   const [postsPerPage] = useState(10)\n//   useEffect(() => {\n//     const fetchPosts = async () => {\n//       setLoading(true)\n//       // const res = await axios.get('https://jsonplaceholder.typicode.com/posts')\n//       // setPosts(res.data)\n//       setLoading(false)\n//     }\n//     fetchPosts()\n//   }, [])\n//   // console.log(posts)\n//   // Get current posts\n//   const indexOfLastPost = currentPage * postsPerPage\n//   const indexOfFirstPost = indexOfLastPost - postsPerPage\n//   // Change page\n//   const paginate = (pageNumber) => setCurrentPage(pageNumber)\n//   return (\n//     <Fragment>\n//       <h1 className='display-4 my-3'>Beers du Quebec </h1>\n//       <Query query={BEERS_QUERY}>\n//         {({ loading, error, data }) => {\n//           if (loading) return <h4>Loading...</h4>\n//           if (error) console.log(error)\n//           const currentPosts = data.beers.slice(\n//             indexOfFirstPost,\n//             indexOfLastPost\n//           )\n//           console.log('data.beers in Querry', data.beers)\n//           setPosts(data.beers)\n//           return (\n//             <Fragment>\n//               {currentPosts.map((beer) => (\n//                 <BeerItem key={beer.name} beer={beer} />\n//               ))}\n//             </Fragment>\n//           )\n//         }}\n//       </Query>\n//     </Fragment>\n//   )\n// }\n// ;<button\n//   type='button'\n//   onClick={() =>\n//     fetchMore({\n//       variables: {\n//         cursor: data,\n//       },\n//       updateQuery,\n//     })\n//   }\n// >\n//   More\n// </button>\n// ;('https://jsonplaceholder.typicode.com/posts')\n// const LINKS_PER_PAGE = 5","map":{"version":3,"sources":["/Users/jonhyun/Desktop/Dev/BeerMontreal/client/src/components/Beers.js"],"names":["React","Component","Fragment","useState","useEffect","gql","Query","BeerItem","axios","Pagination","InfiniteScroll","BEERS_QUERY","Beers","loading","error","data","fetchMore","console","log","loadFunc","beers","map","beer","name"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,QAArC,EAA+CC,SAA/C,QAAgE,OAAhE;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,OAAOC,cAAP,MAA2B,yBAA3B;AAEA,IAAMC,WAAW,GAAGN,GAAH,mBAAjB;AAmBA,OAAO,IAAMO,KAAK,GAAG,SAARA,KAAQ,GAAM;AACzB,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAGE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAED,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,gBAAyC;AAAA,QAAtCE,OAAsC,QAAtCA,OAAsC;AAAA,QAA7BC,KAA6B,QAA7BA,KAA6B;AAAA,QAAtBC,IAAsB,QAAtBA,IAAsB;AAAA,QAAhBC,SAAgB,QAAhBA,SAAgB;AACxC,QAAIH,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACb,QAAIC,KAAJ,EAAWG,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACX;AACE;AACD;AACD,wBACE,oBAAC,cAAD;AACE,MAAA,SAAS,EAAE,CADb;AAEE,MAAA,QAAQ,EAAEK,QAFZ;AAGE,MAAA,OAAO,EAAE,QAAQ,KAHnB;AAIE,MAAA,MAAM,eACJ;AAAK,QAAA,SAAS,EAAC,QAAf;AAAwB,QAAA,GAAG,EAAE,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAUE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGJ,IAAI,CAACK,KAAL,CAAWC,GAAX,CAAe,UAACC,IAAD;AAAA,0BACd,oBAAC,QAAD;AAAU,QAAA,GAAG,EAAEA,IAAI,CAACC,IAApB;AAA0B,QAAA,IAAI,EAAED,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADc;AAAA,KAAf,CADH,CAVF,CADF;AAkBD,GAzBH,CAHF,CADF;AAiCD,CAlCM,C,CAoCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,CAMC;AALC;;;;;AAOF;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component, Fragment, useState, useEffect } from 'react'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\nimport BeerItem from './BeerItem'\nimport axios from 'axios'\nimport Pagination from './Pagination'\n\nimport InfiniteScroll from 'react-infinite-scroller'\n\nconst BEERS_QUERY = gql`\n  query BeersQuery {\n    beers {\n      abv\n      available\n      brewery\n      ibu\n      link\n      name\n      price\n      ratings {\n        name\n        value\n      }\n      style\n    }\n  }\n`\n\nexport const Beers = () => {\n  return (\n    <Fragment>\n      <h1 className='display-4 my-3'>Beers du Quebec </h1>\n\n      <Query query={BEERS_QUERY}>\n        {({ loading, error, data, fetchMore }) => {\n          if (loading) return <h4>Loading...</h4>\n          if (error) console.log(error)\n          {\n            /* console.log('data :', data) */\n          }\n          return (\n            <InfiniteScroll\n              pageStart={0}\n              loadMore={loadFunc}\n              hasMore={true || false}\n              loader={\n                <div className='loader' key={0}>\n                  Loading ...\n                </div>\n              }\n            >\n              <Fragment>\n                {data.beers.map((beer) => (\n                  <BeerItem key={beer.name} beer={beer} />\n                ))}\n              </Fragment>\n            </InfiniteScroll>\n          )\n        }}\n      </Query>\n    </Fragment>\n  )\n}\n\n// ;<Feed\n//   entries={data.feed || []}\n//   onLoadMore={() =>\n//     fetchMore({\n//       variables: {\n//         offset: data.feed.length,\n//       },\n//       updateQuery: (prev, { fetchMoreResult }) => {\n//         if (!fetchMoreResult) return prev\n//         return Object.assign({}, prev, {\n//           feed: [...prev.feed, ...fetchMoreResult.feed],\n//         })\n//       },\n//     })\n//   }\n// />\n\n// const FeedWithData = ({ match }) => (\n//   <Query\n//     query={FEED_QUERY}\n//     variables={{\n//       type: match.params.type.toUpperCase() || 'TOP',\n//       offset: 0,\n//       limit: 10,\n//     }}\n//     fetchPolicy='cache-and-network'\n//   >\n//     {({ data, fetchMore }) => (\n//       <Feed\n//         entries={data.feed || []}\n//         onLoadMore={() =>\n//           fetchMore({\n//             variables: {\n//               offset: data.feed.length,\n//             },\n//             updateQuery: (prev, { fetchMoreResult }) => {\n//               if (!fetchMoreResult) return prev\n//               return Object.assign({}, prev, {\n//                 feed: [...prev.feed, ...fetchMoreResult.feed],\n//               })\n//             },\n//           })\n//         }\n//       />\n//     )}\n//   </Query>\n// )\n\n// export class Beers extends Component {\n//   _forPafination = (store) => {\n//     const isNewPage = this.props.location.pathname.includes('new')\n//     const page = parseInt(this.props.match.params.page, 10)\n\n//     const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0\n//     const first = isNewPage ? LINKS_PER_PAGE : 100\n//     const orderBy = isNewPage ? 'createdAt_DESC' : null\n\n//     const data = store.readQuery({\n//       query: BEERS_QUERY,\n//       variables: { first, skip, orderBy },\n//     })\n\n//     store.writeQuery({ query: BEERS_QUERY, data })\n//   }\n\n//   _getQueryVariables = () => {\n//     const page = parseInt(this.props.match.params.page, 10)\n\n//     const skip = (page - 1) * LINKS_PER_PAGE\n//     const first = LINKS_PER_PAGE\n//     const orderBy = 'createdAt_DESC'\n//     return { first, skip, orderBy }\n//   }\n\n//   render() {\n//     return (\n//       <Fragment>\n//         <h1 className='display-4 my-3'>Beers du Quebec </h1>\n\n//         <Query query={BEERS_QUERY} variables={this._getQueryVariables}>\n//           {({ loading, error, data }) => {\n//             if (loading) return <h4>Loading...</h4>\n//             if (error) console.log(error)\n\n//             return (\n//               <Fragment>\n//                 {data.beers.map((beer) => (\n//                   <BeerItem\n//                     key={beer.name}\n//                     beer={beer}\n//                     forPafination={this._forPafination}\n//                   />\n//                 ))}\n//               </Fragment>\n//             )\n//           }}\n//         </Query>\n//       </Fragment>\n//     )\n//   }\n// }\n\n// export default Beers\n\n{\n  /* <Pagination\npostsPerPage={postsPerPage}\ntotalPosts={posts.length}\npaginate={paginate}\n/> */\n}\n\n// const Beers = () => {\n//   const [posts, setPosts] = useState([])\n//   const [loading, setLoading] = useState(false)\n//   const [currentPage, setCurrentPage] = useState(1)\n//   const [postsPerPage] = useState(10)\n\n//   useEffect(() => {\n//     const fetchPosts = async () => {\n//       setLoading(true)\n//       // const res = await axios.get('https://jsonplaceholder.typicode.com/posts')\n//       // setPosts(res.data)\n//       setLoading(false)\n//     }\n\n//     fetchPosts()\n//   }, [])\n\n//   // console.log(posts)\n\n//   // Get current posts\n//   const indexOfLastPost = currentPage * postsPerPage\n//   const indexOfFirstPost = indexOfLastPost - postsPerPage\n\n//   // Change page\n//   const paginate = (pageNumber) => setCurrentPage(pageNumber)\n\n//   return (\n//     <Fragment>\n//       <h1 className='display-4 my-3'>Beers du Quebec </h1>\n\n//       <Query query={BEERS_QUERY}>\n//         {({ loading, error, data }) => {\n//           if (loading) return <h4>Loading...</h4>\n//           if (error) console.log(error)\n\n//           const currentPosts = data.beers.slice(\n//             indexOfFirstPost,\n//             indexOfLastPost\n//           )\n//           console.log('data.beers in Querry', data.beers)\n//           setPosts(data.beers)\n\n//           return (\n//             <Fragment>\n//               {currentPosts.map((beer) => (\n//                 <BeerItem key={beer.name} beer={beer} />\n//               ))}\n//             </Fragment>\n//           )\n//         }}\n//       </Query>\n//     </Fragment>\n//   )\n// }\n\n// ;<button\n//   type='button'\n//   onClick={() =>\n//     fetchMore({\n//       variables: {\n//         cursor: data,\n//       },\n//       updateQuery,\n//     })\n//   }\n// >\n//   More\n// </button>\n// ;('https://jsonplaceholder.typicode.com/posts')\n// const LINKS_PER_PAGE = 5\n"]},"metadata":{},"sourceType":"module"}