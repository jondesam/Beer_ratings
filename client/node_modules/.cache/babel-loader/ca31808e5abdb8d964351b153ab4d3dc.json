{"ast":null,"code":"import _classCallCheck from \"/Users/jonhyun/Desktop/Dev/BeerMontreal/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jonhyun/Desktop/Dev/BeerMontreal/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/jonhyun/Desktop/Dev/BeerMontreal/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/jonhyun/Desktop/Dev/BeerMontreal/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/jonhyun/Desktop/Dev/BeerMontreal/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _taggedTemplateLiteral from \"/Users/jonhyun/Desktop/Dev/BeerMontreal/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jonhyun/Desktop/Dev/BeerMontreal/client/src/components/Beers.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query BeersQuery($cursor: String) {\\n    beers {\\n      abv\\n      available\\n      brewery\\n      ibu\\n      link\\n      name\\n      price\\n      ratings {\\n        name\\n        value\\n      }\\n      style\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component, Fragment, useState, useEffect } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport BeerItem from './BeerItem';\nimport axios from 'axios';\nimport Pagination from './Pagination';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nvar BEERS_QUERY = gql(_templateObject()); // 'https://jsonplaceholder.typicode.com/posts'\n// const LINKS_PER_PAGE = 5\n\nvar beers = [];\n\nvar Beers = /*#__PURE__*/function (_Component) {\n  _inherits(Beers, _Component);\n\n  var _super = _createSuper(Beers);\n\n  function Beers() {\n    var _this;\n\n    _classCallCheck(this, Beers);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      beers: [],\n      count: 30,\n      start: 1\n    };\n\n    _this.fetchBeers = function () {\n      console.log('More beers');\n      return /*#__PURE__*/React.createElement(Query, {\n        query: BEERS_QUERY,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 7\n        }\n      }, function (_ref) {\n        var loading = _ref.loading,\n            error = _ref.error,\n            data = _ref.data,\n            fetchMore = _ref.fetchMore;\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Beers, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        className: \"display-4 my-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }\n      }, \"Beers du Quebec \"), /*#__PURE__*/React.createElement(Query, {\n        query: BEERS_QUERY,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }\n      }, function (_ref2) {\n        var loading = _ref2.loading,\n            error = _ref2.error,\n            data = _ref2.data,\n            fetchMore = _ref2.fetchMore;\n        if (loading) return /*#__PURE__*/React.createElement(\"h4\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 33\n          }\n        }, \"Loading...\");\n        if (error) console.log(error);\n        console.log('data :', data);\n        {\n          /* beers = data.beers */\n        }\n        console.log(beers);\n        return /*#__PURE__*/React.createElement(Fragment, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n          dataLength: beers.length,\n          next: _this2.fetchBeers,\n          hasMore: true,\n          loader: /*#__PURE__*/React.createElement(\"h4\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 27\n            }\n          }, \"Loading...\"),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 17\n          }\n        }), data.beers.map(function (beer) {\n          return /*#__PURE__*/React.createElement(BeerItem, {\n            key: beer.name,\n            beer: beer,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 19\n            }\n          });\n        }));\n      }));\n    }\n  }]);\n\n  return Beers;\n}(Component); // ;<Feed\n//   entries={data.feed || []}\n//   onLoadMore={() =>\n//     fetchMore({\n//       variables: {\n//         offset: data.feed.length,\n//       },\n//       updateQuery: (prev, { fetchMoreResult }) => {\n//         if (!fetchMoreResult) return prev\n//         return Object.assign({}, prev, {\n//           feed: [...prev.feed, ...fetchMoreResult.feed],\n//         })\n//       },\n//     })\n//   }\n// />\n// const FeedWithData = ({ match }) => (\n//   <Query\n//     query={FEED_QUERY}\n//     variables={{\n//       type: match.params.type.toUpperCase() || 'TOP',\n//       offset: 0,\n//       limit: 10,\n//     }}\n//     fetchPolicy='cache-and-network'\n//   >\n//     {({ data, fetchMore }) => (\n//       <Feed\n//         entries={data.feed || []}\n//         onLoadMore={() =>\n//           fetchMore({\n//             variables: {\n//               offset: data.feed.length,\n//             },\n//             updateQuery: (prev, { fetchMoreResult }) => {\n//               if (!fetchMoreResult) return prev\n//               return Object.assign({}, prev, {\n//                 feed: [...prev.feed, ...fetchMoreResult.feed],\n//               })\n//             },\n//           })\n//         }\n//       />\n//     )}\n//   </Query>\n// )\n// export class Beers extends Component {\n//   _forPafination = (store) => {\n//     const isNewPage = this.props.location.pathname.includes('new')\n//     const page = parseInt(this.props.match.params.page, 10)\n//     const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0\n//     const first = isNewPage ? LINKS_PER_PAGE : 100\n//     const orderBy = isNewPage ? 'createdAt_DESC' : null\n//     const data = store.readQuery({\n//       query: BEERS_QUERY,\n//       variables: { first, skip, orderBy },\n//     })\n//     store.writeQuery({ query: BEERS_QUERY, data })\n//   }\n//   _getQueryVariables = () => {\n//     const page = parseInt(this.props.match.params.page, 10)\n//     const skip = (page - 1) * LINKS_PER_PAGE\n//     const first = LINKS_PER_PAGE\n//     const orderBy = 'createdAt_DESC'\n//     return { first, skip, orderBy }\n//   }\n//   render() {\n//     return (\n//       <Fragment>\n//         <h1 className='display-4 my-3'>Beers du Quebec </h1>\n//         <Query query={BEERS_QUERY} variables={this._getQueryVariables}>\n//           {({ loading, error, data }) => {\n//             if (loading) return <h4>Loading...</h4>\n//             if (error) console.log(error)\n//             return (\n//               <Fragment>\n//                 {data.beers.map((beer) => (\n//                   <BeerItem\n//                     key={beer.name}\n//                     beer={beer}\n//                     forPafination={this._forPafination}\n//                   />\n//                 ))}\n//               </Fragment>\n//             )\n//           }}\n//         </Query>\n//       </Fragment>\n//     )\n//   }\n// }\n\n\nexport default Beers; // {/* <Pagination\n// postsPerPage={postsPerPage}\n// totalPosts={posts.length}\n// paginate={paginate}\n// /> */}\n// const Beers = () => {\n//   const [posts, setPosts] = useState([])\n//   const [loading, setLoading] = useState(false)\n//   const [currentPage, setCurrentPage] = useState(1)\n//   const [postsPerPage] = useState(10)\n//   useEffect(() => {\n//     const fetchPosts = async () => {\n//       setLoading(true)\n//       // const res = await axios.get('https://jsonplaceholder.typicode.com/posts')\n//       // setPosts(res.data)\n//       setLoading(false)\n//     }\n//     fetchPosts()\n//   }, [])\n//   // console.log(posts)\n//   // Get current posts\n//   const indexOfLastPost = currentPage * postsPerPage\n//   const indexOfFirstPost = indexOfLastPost - postsPerPage\n//   // Change page\n//   const paginate = (pageNumber) => setCurrentPage(pageNumber)\n//   return (\n//     <Fragment>\n//       <h1 className='display-4 my-3'>Beers du Quebec </h1>\n//       <Query query={BEERS_QUERY}>\n//         {({ loading, error, data }) => {\n//           if (loading) return <h4>Loading...</h4>\n//           if (error) console.log(error)\n//           const currentPosts = data.beers.slice(\n//             indexOfFirstPost,\n//             indexOfLastPost\n//           )\n//           console.log('data.beers in Querry', data.beers)\n//           setPosts(data.beers)\n//           return (\n//             <Fragment>\n//               {currentPosts.map((beer) => (\n//                 <BeerItem key={beer.name} beer={beer} />\n//               ))}\n//             </Fragment>\n//           )\n//         }}\n//       </Query>\n//     </Fragment>\n//   )\n// }","map":{"version":3,"sources":["/Users/jonhyun/Desktop/Dev/BeerMontreal/client/src/components/Beers.js"],"names":["React","Component","Fragment","useState","useEffect","gql","Query","BeerItem","axios","Pagination","InfiniteScroll","BEERS_QUERY","beers","Beers","state","count","start","fetchBeers","console","log","loading","error","data","fetchMore","length","map","beer","name"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,QAArC,EAA+CC,SAA/C,QAAgE,OAAhE;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AAEA,IAAMC,WAAW,GAAGN,GAAH,mBAAjB,C,CAmBA;AACA;;AAEA,IAAIO,KAAK,GAAG,EAAZ;;IAEMC,K;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNF,MAAAA,KAAK,EAAE,EADD;AAENG,MAAAA,KAAK,EAAE,EAFD;AAGNC,MAAAA,KAAK,EAAE;AAHD,K;;UAMRC,U,GAAa,YAAM;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,0BACE,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAER,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,gBAAyC;AAAA,YAAtCS,OAAsC,QAAtCA,OAAsC;AAAA,YAA7BC,KAA6B,QAA7BA,KAA6B;AAAA,YAAtBC,IAAsB,QAAtBA,IAAsB;AAAA,YAAhBC,SAAgB,QAAhBA,SAAgB;AAAE,OAD9C,CADF;AAKD,K;;;;;;;6BAEQ;AAAA;;AACP,0BACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAI,QAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,eAGE,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAEZ,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,iBAAyC;AAAA,YAAtCS,OAAsC,SAAtCA,OAAsC;AAAA,YAA7BC,KAA6B,SAA7BA,KAA6B;AAAA,YAAtBC,IAAsB,SAAtBA,IAAsB;AAAA,YAAhBC,SAAgB,SAAhBA,SAAgB;AACxC,YAAIH,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACb,YAAIC,KAAJ,EAAWH,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACXH,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBG,IAAtB;AAEA;AACE;AACD;AAEDJ,QAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACA,4BACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE,oBAAC,cAAD;AACE,UAAA,UAAU,EAAEA,KAAK,CAACY,MADpB;AAEE,UAAA,IAAI,EAAE,MAAI,CAACP,UAFb;AAGE,UAAA,OAAO,EAAE,IAHX;AAIE,UAAA,MAAM,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAOGK,IAAI,CAACV,KAAL,CAAWa,GAAX,CAAe,UAACC,IAAD;AAAA,8BACd,oBAAC,QAAD;AAAU,YAAA,GAAG,EAAEA,IAAI,CAACC,IAApB;AAA0B,YAAA,IAAI,EAAED,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADc;AAAA,SAAf,CAPH,CADF;AA0BD,OArCH,CAHF,CADF;AA6CD;;;;EA9DiBzB,S,GAiEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeY,KAAf,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component, Fragment, useState, useEffect } from 'react'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\nimport BeerItem from './BeerItem'\nimport axios from 'axios'\nimport Pagination from './Pagination'\nimport InfiniteScroll from 'react-infinite-scroll-component'\n\nconst BEERS_QUERY = gql`\n  query BeersQuery($cursor: String) {\n    beers {\n      abv\n      available\n      brewery\n      ibu\n      link\n      name\n      price\n      ratings {\n        name\n        value\n      }\n      style\n    }\n  }\n`\n\n// 'https://jsonplaceholder.typicode.com/posts'\n// const LINKS_PER_PAGE = 5\n\nlet beers = []\n\nclass Beers extends Component {\n  state = {\n    beers: [],\n    count: 30,\n    start: 1,\n  }\n\n  fetchBeers = () => {\n    console.log('More beers')\n    return (\n      <Query query={BEERS_QUERY}>\n        {({ loading, error, data, fetchMore }) => {}}\n      </Query>\n    )\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <h1 className='display-4 my-3'>Beers du Quebec </h1>\n\n        <Query query={BEERS_QUERY}>\n          {({ loading, error, data, fetchMore }) => {\n            if (loading) return <h4>Loading...</h4>\n            if (error) console.log(error)\n            console.log('data :', data)\n\n            {\n              /* beers = data.beers */\n            }\n\n            console.log(beers)\n            return (\n              <Fragment>\n                <InfiniteScroll\n                  dataLength={beers.length}\n                  next={this.fetchBeers}\n                  hasMore={true}\n                  loader={<h4>Loading...</h4>}\n                ></InfiniteScroll>\n                {data.beers.map((beer) => (\n                  <BeerItem key={beer.name} beer={beer} />\n                ))}\n                {/* <button\n                  type='button'\n                  onClick={() =>\n                    fetchMore({\n                      variables: {\n                        cursor: data,\n                      },\n                      updateQuery,\n                    })\n                  }\n                >\n                  More\n                </button> */}\n              </Fragment>\n            )\n          }}\n        </Query>\n      </Fragment>\n    )\n  }\n}\n\n// ;<Feed\n//   entries={data.feed || []}\n//   onLoadMore={() =>\n//     fetchMore({\n//       variables: {\n//         offset: data.feed.length,\n//       },\n//       updateQuery: (prev, { fetchMoreResult }) => {\n//         if (!fetchMoreResult) return prev\n//         return Object.assign({}, prev, {\n//           feed: [...prev.feed, ...fetchMoreResult.feed],\n//         })\n//       },\n//     })\n//   }\n// />\n\n// const FeedWithData = ({ match }) => (\n//   <Query\n//     query={FEED_QUERY}\n//     variables={{\n//       type: match.params.type.toUpperCase() || 'TOP',\n//       offset: 0,\n//       limit: 10,\n//     }}\n//     fetchPolicy='cache-and-network'\n//   >\n//     {({ data, fetchMore }) => (\n//       <Feed\n//         entries={data.feed || []}\n//         onLoadMore={() =>\n//           fetchMore({\n//             variables: {\n//               offset: data.feed.length,\n//             },\n//             updateQuery: (prev, { fetchMoreResult }) => {\n//               if (!fetchMoreResult) return prev\n//               return Object.assign({}, prev, {\n//                 feed: [...prev.feed, ...fetchMoreResult.feed],\n//               })\n//             },\n//           })\n//         }\n//       />\n//     )}\n//   </Query>\n// )\n\n// export class Beers extends Component {\n//   _forPafination = (store) => {\n//     const isNewPage = this.props.location.pathname.includes('new')\n//     const page = parseInt(this.props.match.params.page, 10)\n\n//     const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0\n//     const first = isNewPage ? LINKS_PER_PAGE : 100\n//     const orderBy = isNewPage ? 'createdAt_DESC' : null\n\n//     const data = store.readQuery({\n//       query: BEERS_QUERY,\n//       variables: { first, skip, orderBy },\n//     })\n\n//     store.writeQuery({ query: BEERS_QUERY, data })\n//   }\n\n//   _getQueryVariables = () => {\n//     const page = parseInt(this.props.match.params.page, 10)\n\n//     const skip = (page - 1) * LINKS_PER_PAGE\n//     const first = LINKS_PER_PAGE\n//     const orderBy = 'createdAt_DESC'\n//     return { first, skip, orderBy }\n//   }\n\n//   render() {\n//     return (\n//       <Fragment>\n//         <h1 className='display-4 my-3'>Beers du Quebec </h1>\n\n//         <Query query={BEERS_QUERY} variables={this._getQueryVariables}>\n//           {({ loading, error, data }) => {\n//             if (loading) return <h4>Loading...</h4>\n//             if (error) console.log(error)\n\n//             return (\n//               <Fragment>\n//                 {data.beers.map((beer) => (\n//                   <BeerItem\n//                     key={beer.name}\n//                     beer={beer}\n//                     forPafination={this._forPafination}\n//                   />\n//                 ))}\n//               </Fragment>\n//             )\n//           }}\n//         </Query>\n//       </Fragment>\n//     )\n//   }\n// }\n\nexport default Beers\n\n// {/* <Pagination\n// postsPerPage={postsPerPage}\n// totalPosts={posts.length}\n// paginate={paginate}\n// /> */}\n\n// const Beers = () => {\n//   const [posts, setPosts] = useState([])\n//   const [loading, setLoading] = useState(false)\n//   const [currentPage, setCurrentPage] = useState(1)\n//   const [postsPerPage] = useState(10)\n\n//   useEffect(() => {\n//     const fetchPosts = async () => {\n//       setLoading(true)\n//       // const res = await axios.get('https://jsonplaceholder.typicode.com/posts')\n//       // setPosts(res.data)\n//       setLoading(false)\n//     }\n\n//     fetchPosts()\n//   }, [])\n\n//   // console.log(posts)\n\n//   // Get current posts\n//   const indexOfLastPost = currentPage * postsPerPage\n//   const indexOfFirstPost = indexOfLastPost - postsPerPage\n\n//   // Change page\n//   const paginate = (pageNumber) => setCurrentPage(pageNumber)\n\n//   return (\n//     <Fragment>\n//       <h1 className='display-4 my-3'>Beers du Quebec </h1>\n\n//       <Query query={BEERS_QUERY}>\n//         {({ loading, error, data }) => {\n//           if (loading) return <h4>Loading...</h4>\n//           if (error) console.log(error)\n\n//           const currentPosts = data.beers.slice(\n//             indexOfFirstPost,\n//             indexOfLastPost\n//           )\n//           console.log('data.beers in Querry', data.beers)\n//           setPosts(data.beers)\n\n//           return (\n//             <Fragment>\n//               {currentPosts.map((beer) => (\n//                 <BeerItem key={beer.name} beer={beer} />\n//               ))}\n\n//             </Fragment>\n//           )\n//         }}\n//       </Query>\n//     </Fragment>\n//   )\n// }\n"]},"metadata":{},"sourceType":"module"}