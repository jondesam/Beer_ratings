{"ast":null,"code":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/**\n *  Copyright (c) 2015-present, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n *   strict\n */\n\n\nvar _accepts = require('accepts');\n\nvar _accepts2 = _interopRequireDefault(_accepts);\n\nvar _graphql = require('graphql');\n\nvar _httpErrors = require('http-errors');\n\nvar _httpErrors2 = _interopRequireDefault(_httpErrors);\n\nvar _url = require('url');\n\nvar _url2 = _interopRequireDefault(_url);\n\nvar _parseBody = require('./parseBody');\n\nvar _renderGraphiQL = require('./renderGraphiQL');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Middleware for express; takes an options object or function as input to\n * configure behavior, and returns an express middleware.\n */\n\n/**\n * Used to configure the graphqlHTTP middleware by providing a schema\n * and other configuration options.\n *\n * Options can be provided as an Object, a Promise for an Object, or a Function\n * that returns an Object or a Promise for an Object.\n */\n\n/**\n * All information about a GraphQL request.\n */\n\n\nmodule.exports = graphqlHTTP;\n\nfunction graphqlHTTP(options) {\n  if (!options) {\n    throw new Error('GraphQL middleware requires options.');\n  }\n\n  return function graphqlMiddleware(request, response) {\n    // Higher scoped variables are referred to at various stages in the\n    // asynchronous state machine below.\n    var context = void 0;\n    var params = void 0;\n    var pretty = void 0;\n    var formatErrorFn = void 0;\n    var extensionsFn = void 0;\n    var showGraphiQL = void 0;\n    var query = void 0;\n    var documentAST = void 0;\n    var variables = void 0;\n    var operationName = void 0; // Promises are used as a mechanism for capturing any thrown errors during\n    // the asynchronous process below.\n    // Parse the Request to get GraphQL request parameters.\n\n    return getGraphQLParams(request).then(function (graphQLParams) {\n      params = graphQLParams; // Then, resolve the Options to get OptionsData.\n\n      return resolveOptions(params);\n    }, function (error) {\n      // When we failed to parse the GraphQL parameters, we still need to get\n      // the options object, so make an options call to resolve just that.\n      var dummyParams = {\n        query: null,\n        variables: null,\n        operationName: null,\n        raw: null\n      };\n      return resolveOptions(dummyParams).then(function () {\n        return Promise.reject(error);\n      });\n    }).then(function (optionsData) {\n      // Assert that schema is required.\n      if (!optionsData.schema) {\n        throw new Error('GraphQL middleware options must contain a schema.');\n      } // Collect information from the options data object.\n\n\n      var schema = optionsData.schema;\n      var rootValue = optionsData.rootValue;\n      var fieldResolver = optionsData.fieldResolver;\n      var graphiql = optionsData.graphiql;\n      context = optionsData.context || request;\n      var validationRules = _graphql.specifiedRules;\n\n      if (optionsData.validationRules) {\n        validationRules = validationRules.concat(optionsData.validationRules);\n      } // GraphQL HTTP only supports GET and POST methods.\n\n\n      if (request.method !== 'GET' && request.method !== 'POST') {\n        response.setHeader('Allow', 'GET, POST');\n        throw (0, _httpErrors2.default)(405, 'GraphQL only supports GET and POST requests.');\n      } // Get GraphQL params from the request and POST body data.\n\n\n      query = params.query;\n      variables = params.variables;\n      operationName = params.operationName;\n      showGraphiQL = graphiql && canDisplayGraphiQL(request, params); // If there is no query, but GraphiQL will be displayed, do not produce\n      // a result, otherwise return a 400: Bad Request.\n\n      if (!query) {\n        if (showGraphiQL) {\n          return null;\n        }\n\n        throw (0, _httpErrors2.default)(400, 'Must provide query string.');\n      } // Validate Schema\n\n\n      var schemaValidationErrors = (0, _graphql.validateSchema)(schema);\n\n      if (schemaValidationErrors.length > 0) {\n        // Return 500: Internal Server Error if invalid schema.\n        response.statusCode = 500;\n        return {\n          errors: schemaValidationErrors\n        };\n      } //  GraphQL source.\n\n\n      var source = new _graphql.Source(query, 'GraphQL request'); // Parse source to AST, reporting any syntax error.\n\n      try {\n        documentAST = (0, _graphql.parse)(source);\n      } catch (syntaxError) {\n        // Return 400: Bad Request if any syntax errors errors exist.\n        response.statusCode = 400;\n        return {\n          errors: [syntaxError]\n        };\n      } // Validate AST, reporting any errors.\n\n\n      var validationErrors = (0, _graphql.validate)(schema, documentAST, validationRules);\n\n      if (validationErrors.length > 0) {\n        // Return 400: Bad Request if any validation errors exist.\n        response.statusCode = 400;\n        return {\n          errors: validationErrors\n        };\n      } // Only query operations are allowed on GET requests.\n\n\n      if (request.method === 'GET') {\n        // Determine if this GET request will perform a non-query.\n        var operationAST = (0, _graphql.getOperationAST)(documentAST, operationName);\n\n        if (operationAST && operationAST.operation !== 'query') {\n          // If GraphiQL can be shown, do not perform this query, but\n          // provide it to GraphiQL so that the requester may perform it\n          // themselves if desired.\n          if (showGraphiQL) {\n            return null;\n          } // Otherwise, report a 405: Method Not Allowed error.\n\n\n          response.setHeader('Allow', 'POST');\n          throw (0, _httpErrors2.default)(405, 'Can only perform a ' + operationAST.operation + ' operation ' + 'from a POST request.');\n        }\n      } // Perform the execution, reporting any errors creating the context.\n\n\n      try {\n        return (0, _graphql.execute)(schema, documentAST, rootValue, context, variables, operationName, fieldResolver);\n      } catch (contextError) {\n        // Return 400: Bad Request if any execution context errors exist.\n        response.statusCode = 400;\n        return {\n          errors: [contextError]\n        };\n      }\n    }).then(function (result) {\n      // Collect and apply any metadata extensions if a function was provided.\n      // http://facebook.github.io/graphql/#sec-Response-Format\n      if (result && extensionsFn) {\n        return Promise.resolve(extensionsFn({\n          document: documentAST,\n          variables: variables,\n          operationName: operationName,\n          result: result,\n          context: context\n        })).then(function (extensions) {\n          if (extensions && (typeof extensions === 'undefined' ? 'undefined' : _typeof(extensions)) === 'object') {\n            result.extensions = extensions;\n          }\n\n          return result;\n        });\n      }\n\n      return result;\n    }).catch(function (error) {\n      // If an error was caught, report the httpError status, or 500.\n      response.statusCode = error.status || 500;\n      return {\n        errors: [error]\n      };\n    }).then(function (result) {\n      // If no data was included in the result, that indicates a runtime query\n      // error, indicate as such with a generic status code.\n      // Note: Information about the error itself will still be contained in\n      // the resulting JSON payload.\n      // http://facebook.github.io/graphql/#sec-Data\n      if (response.statusCode === 200 && result && !result.data) {\n        response.statusCode = 500;\n      } // Format any encountered errors.\n\n\n      if (result && result.errors) {\n        result.errors = result.errors.map(formatErrorFn || _graphql.formatError);\n      } // If allowed to show GraphiQL, present it instead of JSON.\n\n\n      if (showGraphiQL) {\n        var payload = (0, _renderGraphiQL.renderGraphiQL)({\n          query: query,\n          variables: variables,\n          operationName: operationName,\n          result: result\n        });\n        return sendResponse(response, 'text/html', payload);\n      } // At this point, result is guaranteed to exist, as the only scenario\n      // where it will not is when showGraphiQL is true.\n\n\n      if (!result) {\n        throw (0, _httpErrors2.default)(500, 'Internal Error');\n      } // If \"pretty\" JSON isn't requested, and the server provides a\n      // response.json method (express), use that directly.\n      // Otherwise use the simplified sendResponse method.\n\n\n      if (!pretty && typeof response.json === 'function') {\n        response.json(result);\n      } else {\n        var _payload = JSON.stringify(result, null, pretty ? 2 : 0);\n\n        sendResponse(response, 'application/json', _payload);\n      }\n    });\n\n    function resolveOptions(requestParams) {\n      return Promise.resolve(typeof options === 'function' ? options(request, response, requestParams) : options).then(function (optionsData) {\n        // Assert that optionsData is in fact an Object.\n        if (!optionsData || (typeof optionsData === 'undefined' ? 'undefined' : _typeof(optionsData)) !== 'object') {\n          throw new Error('GraphQL middleware option function must return an options object ' + 'or a promise which will be resolved to an options object.');\n        }\n\n        formatErrorFn = optionsData.formatError;\n        extensionsFn = optionsData.extensions;\n        pretty = optionsData.pretty;\n        return optionsData;\n      });\n    }\n  };\n}\n/**\n * Provided a \"Request\" provided by express or connect (typically a node style\n * HTTPClientRequest), Promise the GraphQL request parameters.\n */\n\n\nmodule.exports.getGraphQLParams = getGraphQLParams;\n\nfunction getGraphQLParams(request) {\n  return (0, _parseBody.parseBody)(request).then(function (bodyData) {\n    var urlData = request.url && _url2.default.parse(request.url, true).query || {};\n    return parseGraphQLParams(urlData, bodyData);\n  });\n}\n/**\n * Helper function to get the GraphQL params from the request.\n */\n\n\nfunction parseGraphQLParams(urlData, bodyData) {\n  // GraphQL Query string.\n  var query = urlData.query || bodyData.query;\n\n  if (typeof query !== 'string') {\n    query = null;\n  } // Parse the variables if needed.\n\n\n  var variables = urlData.variables || bodyData.variables;\n\n  if (variables && typeof variables === 'string') {\n    try {\n      variables = JSON.parse(variables);\n    } catch (error) {\n      throw (0, _httpErrors2.default)(400, 'Variables are invalid JSON.');\n    }\n  } else if ((typeof variables === 'undefined' ? 'undefined' : _typeof(variables)) !== 'object') {\n    variables = null;\n  } // Name of GraphQL operation to execute.\n\n\n  var operationName = urlData.operationName || bodyData.operationName;\n\n  if (typeof operationName !== 'string') {\n    operationName = null;\n  }\n\n  var raw = urlData.raw !== undefined || bodyData.raw !== undefined;\n  return {\n    query: query,\n    variables: variables,\n    operationName: operationName,\n    raw: raw\n  };\n}\n/**\n * Helper function to determine if GraphiQL can be displayed.\n */\n\n\nfunction canDisplayGraphiQL(request, params) {\n  // If `raw` exists, GraphiQL mode is not enabled.\n  // Allowed to show GraphiQL if not requested as raw and this request\n  // prefers HTML over JSON.\n  return !params.raw && (0, _accepts2.default)(request).types(['json', 'html']) === 'html';\n}\n/**\n * Helper function for sending a response using only the core Node server APIs.\n */\n\n\nfunction sendResponse(response, type, data) {\n  var chunk = new Buffer(data, 'utf8');\n  response.setHeader('Content-Type', type + '; charset=utf-8');\n  response.setHeader('Content-Length', String(chunk.length));\n  response.end(chunk);\n}","map":{"version":3,"sources":["/Users/jonhyun/Desktop/Dev/BeerMontreal/node_modules/express-graphql/dist/index.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","_accepts","require","_accepts2","_interopRequireDefault","_graphql","_httpErrors","_httpErrors2","_url","_url2","_parseBody","_renderGraphiQL","__esModule","default","module","exports","graphqlHTTP","options","Error","graphqlMiddleware","request","response","context","params","pretty","formatErrorFn","extensionsFn","showGraphiQL","query","documentAST","variables","operationName","getGraphQLParams","then","graphQLParams","resolveOptions","error","dummyParams","raw","Promise","reject","optionsData","schema","rootValue","fieldResolver","graphiql","validationRules","specifiedRules","concat","method","setHeader","canDisplayGraphiQL","schemaValidationErrors","validateSchema","length","statusCode","errors","source","Source","parse","syntaxError","validationErrors","validate","operationAST","getOperationAST","operation","execute","contextError","result","resolve","document","extensions","catch","status","data","map","formatError","payload","renderGraphiQL","sendResponse","json","_payload","JSON","stringify","requestParams","parseBody","bodyData","urlData","url","parseGraphQLParams","undefined","types","type","chunk","Buffer","String","end"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               *  Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *  All rights reserved.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               *  This source code is licensed under the BSD-style license found in the\n                                                                                                                                                                                                                                                                               *  LICENSE file in the root directory of this source tree. An additional grant\n                                                                                                                                                                                                                                                                               *  of patent rights can be found in the PATENTS file in the same directory.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               *   strict\n                                                                                                                                                                                                                                                                               */\n\nvar _accepts = require('accepts');\n\nvar _accepts2 = _interopRequireDefault(_accepts);\n\nvar _graphql = require('graphql');\n\nvar _httpErrors = require('http-errors');\n\nvar _httpErrors2 = _interopRequireDefault(_httpErrors);\n\nvar _url = require('url');\n\nvar _url2 = _interopRequireDefault(_url);\n\nvar _parseBody = require('./parseBody');\n\nvar _renderGraphiQL = require('./renderGraphiQL');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Middleware for express; takes an options object or function as input to\n * configure behavior, and returns an express middleware.\n */\n\n\n/**\n * Used to configure the graphqlHTTP middleware by providing a schema\n * and other configuration options.\n *\n * Options can be provided as an Object, a Promise for an Object, or a Function\n * that returns an Object or a Promise for an Object.\n */\n\n\n/**\n * All information about a GraphQL request.\n */\nmodule.exports = graphqlHTTP;\nfunction graphqlHTTP(options) {\n  if (!options) {\n    throw new Error('GraphQL middleware requires options.');\n  }\n\n  return function graphqlMiddleware(request, response) {\n    // Higher scoped variables are referred to at various stages in the\n    // asynchronous state machine below.\n    var context = void 0;\n    var params = void 0;\n    var pretty = void 0;\n    var formatErrorFn = void 0;\n    var extensionsFn = void 0;\n    var showGraphiQL = void 0;\n    var query = void 0;\n\n    var documentAST = void 0;\n    var variables = void 0;\n    var operationName = void 0;\n\n    // Promises are used as a mechanism for capturing any thrown errors during\n    // the asynchronous process below.\n\n    // Parse the Request to get GraphQL request parameters.\n    return getGraphQLParams(request).then(function (graphQLParams) {\n      params = graphQLParams;\n      // Then, resolve the Options to get OptionsData.\n      return resolveOptions(params);\n    }, function (error) {\n      // When we failed to parse the GraphQL parameters, we still need to get\n      // the options object, so make an options call to resolve just that.\n      var dummyParams = {\n        query: null,\n        variables: null,\n        operationName: null,\n        raw: null\n      };\n      return resolveOptions(dummyParams).then(function () {\n        return Promise.reject(error);\n      });\n    }).then(function (optionsData) {\n      // Assert that schema is required.\n      if (!optionsData.schema) {\n        throw new Error('GraphQL middleware options must contain a schema.');\n      }\n\n      // Collect information from the options data object.\n      var schema = optionsData.schema;\n      var rootValue = optionsData.rootValue;\n      var fieldResolver = optionsData.fieldResolver;\n      var graphiql = optionsData.graphiql;\n\n      context = optionsData.context || request;\n\n      var validationRules = _graphql.specifiedRules;\n      if (optionsData.validationRules) {\n        validationRules = validationRules.concat(optionsData.validationRules);\n      }\n\n      // GraphQL HTTP only supports GET and POST methods.\n      if (request.method !== 'GET' && request.method !== 'POST') {\n        response.setHeader('Allow', 'GET, POST');\n        throw (0, _httpErrors2.default)(405, 'GraphQL only supports GET and POST requests.');\n      }\n\n      // Get GraphQL params from the request and POST body data.\n      query = params.query;\n      variables = params.variables;\n      operationName = params.operationName;\n      showGraphiQL = graphiql && canDisplayGraphiQL(request, params);\n\n      // If there is no query, but GraphiQL will be displayed, do not produce\n      // a result, otherwise return a 400: Bad Request.\n      if (!query) {\n        if (showGraphiQL) {\n          return null;\n        }\n        throw (0, _httpErrors2.default)(400, 'Must provide query string.');\n      }\n\n      // Validate Schema\n      var schemaValidationErrors = (0, _graphql.validateSchema)(schema);\n      if (schemaValidationErrors.length > 0) {\n        // Return 500: Internal Server Error if invalid schema.\n        response.statusCode = 500;\n        return { errors: schemaValidationErrors };\n      }\n\n      //  GraphQL source.\n      var source = new _graphql.Source(query, 'GraphQL request');\n\n      // Parse source to AST, reporting any syntax error.\n      try {\n        documentAST = (0, _graphql.parse)(source);\n      } catch (syntaxError) {\n        // Return 400: Bad Request if any syntax errors errors exist.\n        response.statusCode = 400;\n        return { errors: [syntaxError] };\n      }\n\n      // Validate AST, reporting any errors.\n      var validationErrors = (0, _graphql.validate)(schema, documentAST, validationRules);\n      if (validationErrors.length > 0) {\n        // Return 400: Bad Request if any validation errors exist.\n        response.statusCode = 400;\n        return { errors: validationErrors };\n      }\n\n      // Only query operations are allowed on GET requests.\n      if (request.method === 'GET') {\n        // Determine if this GET request will perform a non-query.\n        var operationAST = (0, _graphql.getOperationAST)(documentAST, operationName);\n        if (operationAST && operationAST.operation !== 'query') {\n          // If GraphiQL can be shown, do not perform this query, but\n          // provide it to GraphiQL so that the requester may perform it\n          // themselves if desired.\n          if (showGraphiQL) {\n            return null;\n          }\n\n          // Otherwise, report a 405: Method Not Allowed error.\n          response.setHeader('Allow', 'POST');\n          throw (0, _httpErrors2.default)(405, 'Can only perform a ' + operationAST.operation + ' operation ' + 'from a POST request.');\n        }\n      }\n      // Perform the execution, reporting any errors creating the context.\n      try {\n        return (0, _graphql.execute)(schema, documentAST, rootValue, context, variables, operationName, fieldResolver);\n      } catch (contextError) {\n        // Return 400: Bad Request if any execution context errors exist.\n        response.statusCode = 400;\n        return { errors: [contextError] };\n      }\n    }).then(function (result) {\n      // Collect and apply any metadata extensions if a function was provided.\n      // http://facebook.github.io/graphql/#sec-Response-Format\n      if (result && extensionsFn) {\n        return Promise.resolve(extensionsFn({\n          document: documentAST,\n          variables: variables,\n          operationName: operationName,\n          result: result,\n          context: context\n        })).then(function (extensions) {\n          if (extensions && (typeof extensions === 'undefined' ? 'undefined' : _typeof(extensions)) === 'object') {\n            result.extensions = extensions;\n          }\n          return result;\n        });\n      }\n      return result;\n    }).catch(function (error) {\n      // If an error was caught, report the httpError status, or 500.\n      response.statusCode = error.status || 500;\n      return { errors: [error] };\n    }).then(function (result) {\n      // If no data was included in the result, that indicates a runtime query\n      // error, indicate as such with a generic status code.\n      // Note: Information about the error itself will still be contained in\n      // the resulting JSON payload.\n      // http://facebook.github.io/graphql/#sec-Data\n      if (response.statusCode === 200 && result && !result.data) {\n        response.statusCode = 500;\n      }\n      // Format any encountered errors.\n      if (result && result.errors) {\n        result.errors = result.errors.map(formatErrorFn || _graphql.formatError);\n      }\n\n      // If allowed to show GraphiQL, present it instead of JSON.\n      if (showGraphiQL) {\n        var payload = (0, _renderGraphiQL.renderGraphiQL)({\n          query: query,\n          variables: variables,\n          operationName: operationName,\n          result: result\n        });\n        return sendResponse(response, 'text/html', payload);\n      }\n\n      // At this point, result is guaranteed to exist, as the only scenario\n      // where it will not is when showGraphiQL is true.\n      if (!result) {\n        throw (0, _httpErrors2.default)(500, 'Internal Error');\n      }\n\n      // If \"pretty\" JSON isn't requested, and the server provides a\n      // response.json method (express), use that directly.\n      // Otherwise use the simplified sendResponse method.\n      if (!pretty && typeof response.json === 'function') {\n        response.json(result);\n      } else {\n        var _payload = JSON.stringify(result, null, pretty ? 2 : 0);\n        sendResponse(response, 'application/json', _payload);\n      }\n    });\n\n    function resolveOptions(requestParams) {\n      return Promise.resolve(typeof options === 'function' ? options(request, response, requestParams) : options).then(function (optionsData) {\n        // Assert that optionsData is in fact an Object.\n        if (!optionsData || (typeof optionsData === 'undefined' ? 'undefined' : _typeof(optionsData)) !== 'object') {\n          throw new Error('GraphQL middleware option function must return an options object ' + 'or a promise which will be resolved to an options object.');\n        }\n\n        formatErrorFn = optionsData.formatError;\n        extensionsFn = optionsData.extensions;\n        pretty = optionsData.pretty;\n        return optionsData;\n      });\n    }\n  };\n}\n\n/**\n * Provided a \"Request\" provided by express or connect (typically a node style\n * HTTPClientRequest), Promise the GraphQL request parameters.\n */\nmodule.exports.getGraphQLParams = getGraphQLParams;\nfunction getGraphQLParams(request) {\n  return (0, _parseBody.parseBody)(request).then(function (bodyData) {\n    var urlData = request.url && _url2.default.parse(request.url, true).query || {};\n    return parseGraphQLParams(urlData, bodyData);\n  });\n}\n\n/**\n * Helper function to get the GraphQL params from the request.\n */\nfunction parseGraphQLParams(urlData, bodyData) {\n  // GraphQL Query string.\n  var query = urlData.query || bodyData.query;\n  if (typeof query !== 'string') {\n    query = null;\n  }\n\n  // Parse the variables if needed.\n  var variables = urlData.variables || bodyData.variables;\n  if (variables && typeof variables === 'string') {\n    try {\n      variables = JSON.parse(variables);\n    } catch (error) {\n      throw (0, _httpErrors2.default)(400, 'Variables are invalid JSON.');\n    }\n  } else if ((typeof variables === 'undefined' ? 'undefined' : _typeof(variables)) !== 'object') {\n    variables = null;\n  }\n\n  // Name of GraphQL operation to execute.\n  var operationName = urlData.operationName || bodyData.operationName;\n  if (typeof operationName !== 'string') {\n    operationName = null;\n  }\n\n  var raw = urlData.raw !== undefined || bodyData.raw !== undefined;\n\n  return { query: query, variables: variables, operationName: operationName, raw: raw };\n}\n\n/**\n * Helper function to determine if GraphiQL can be displayed.\n */\nfunction canDisplayGraphiQL(request, params) {\n  // If `raw` exists, GraphiQL mode is not enabled.\n  // Allowed to show GraphiQL if not requested as raw and this request\n  // prefers HTML over JSON.\n  return !params.raw && (0, _accepts2.default)(request).types(['json', 'html']) === 'html';\n}\n\n/**\n * Helper function for sending a response using only the core Node server APIs.\n */\nfunction sendResponse(response, type, data) {\n  var chunk = new Buffer(data, 'utf8');\n  response.setHeader('Content-Type', type + '; charset=utf-8');\n  response.setHeader('Content-Length', String(chunk.length));\n  response.end(chunk);\n}"]},"metadata":{},"sourceType":"script"}