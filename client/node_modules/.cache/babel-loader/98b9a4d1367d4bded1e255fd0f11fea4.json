{"ast":null,"code":"import _slicedToArray from \"/Users/jonhyun/Desktop/Dev/BeerMontreal/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/jonhyun/Desktop/Dev/BeerMontreal/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/jonhyun/Desktop/Dev/BeerMontreal/client/src/components/Beers.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query BeersQuery {\\n    beers {\\n      abv\\n      available\\n      brewery\\n      ibu\\n      link\\n      name\\n      price\\n      ratings {\\n        name\\n        value\\n      }\\n      style\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component, Fragment, useState, useEffect } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { useQuery } from '@apollo/react-hooks';\nimport BeerItem from './BeerItem';\nimport axios from 'axios';\nimport Pagination from './Pagination';\nimport InfiniteScroll from 'react-infinite-scroll-component'; // import InfiniteScroll from 'react-infinite-scroller'\n\nvar BEERS_QUERY = gql(_templateObject()); // let beers = []\n// let beersWithRatebeer = []\n\nexport var Beers = function Beers() {\n  var _useQuery = useQuery(BEERS_QUERY),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      beers = _useState2[0],\n      setBeers = _useState2[1];\n\n  var sortByPrice = function sortByPrice(a, b) {\n    var priceA = parseInt(a.price);\n    var priceB = parseInt(b.price);\n\n    if (priceA < priceB) {\n      return -1;\n    }\n\n    if (priceA > priceB) {\n      return 1;\n    }\n\n    return 0;\n  };\n\n  var sortByUntappd = function sortByUntappd(a, b) {\n    var ratingA = parseFloat(a.ratings[0].value);\n    var ratingB = parseFloat(b.ratings[0].value);\n    return ratingB - ratingA;\n  };\n\n  var sortByRatebeer = function sortByRatebeer(a, b) {\n    var ratingA = 0;\n    var ratingB = 0;\n\n    if (a.ratings[1] && b.ratings[1]) {\n      ratingA = parseFloat(a.ratings[1].value);\n      ratingB = parseFloat(b.ratings[1].value);\n    }\n\n    return ratingB - ratingA;\n  };\n\n  console.log(data);\n  setBeers(data);\n  console.log(beer);\n  if (loading) return /*#__PURE__*/React.createElement(\"h4\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) console.log(error);\n  {\n    /* beers = data.beers */\n  }\n  {\n    /* beersWithRatebeer = beers.filter(\n            (beer) => beer.ratings[1] !== undefined\n          ) */\n  }\n  {\n    /* beersWithRatebeer.sort(sortByRatebeer)\n           console.log(beersWithRatebeer) */\n  }\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"display-4 my-3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, \"Beers du Quebec \"), /*#__PURE__*/React.createElement(\"nav\", {\n    className: \"nav\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"form-inline\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    type: \"button\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, \"By Price\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-secondary\",\n    type: \"button\",\n    onClick: function onClick() {\n      beers.sort(sortByUntappd);\n      console.log('adfadf');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, \"By Untappd\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-secondary\",\n    type: \"button\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, \"By Ratebeer\"))), /*#__PURE__*/React.createElement(Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, beers.map(function (beer) {\n    return /*#__PURE__*/React.createElement(BeerItem, {\n      key: beer.name,\n      beer: beer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    });\n  })));\n}; // ;<Feed\n//   entries={data.feed || []}\n//   onLoadMore={() =>\n//     fetchMore({\n//       variables: {\n//         offset: data.feed.length,\n//       },\n//       updateQuery: (prev, { fetchMoreResult }) => {\n//         if (!fetchMoreResult) return prev\n//         return Object.assign({}, prev, {\n//           feed: [...prev.feed, ...fetchMoreResult.feed],\n//         })\n//       },\n//     })\n//   }\n// />\n// const FeedWithData = ({ match }) => (\n//   <Query\n//     query={FEED_QUERY}\n//     variables={{\n//       type: match.params.type.toUpperCase() || 'TOP',\n//       offset: 0,\n//       limit: 10,\n//     }}\n//     fetchPolicy='cache-and-network'\n//   >\n//     {({ data, fetchMore }) => (\n//       <Feed\n//         entries={data.feed || []}\n//         onLoadMore={() =>\n//           fetchMore({\n//             variables: {\n//               offset: data.feed.length,\n//             },\n//             updateQuery: (prev, { fetchMoreResult }) => {\n//               if (!fetchMoreResult) return prev\n//               return Object.assign({}, prev, {\n//                 feed: [...prev.feed, ...fetchMoreResult.feed],\n//               })\n//             },\n//           })\n//         }\n//       />\n//     )}\n//   </Query>\n// )\n// export class Beers extends Component {\n//   _forPafination = (store) => {\n//     const isNewPage = this.props.location.pathname.includes('new')\n//     const page = parseInt(this.props.match.params.page, 10)\n//     const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0\n//     const first = isNewPage ? LINKS_PER_PAGE : 100\n//     const orderBy = isNewPage ? 'createdAt_DESC' : null\n//     const data = store.readQuery({\n//       query: BEERS_QUERY,\n//       variables: { first, skip, orderBy },\n//     })\n//     store.writeQuery({ query: BEERS_QUERY, data })\n//   }\n//   _getQueryVariables = () => {\n//     const page = parseInt(this.props.match.params.page, 10)\n//     const skip = (page - 1) * LINKS_PER_PAGE\n//     const first = LINKS_PER_PAGE\n//     const orderBy = 'createdAt_DESC'\n//     return { first, skip, orderBy }\n//   }\n//   render() {\n//     return (\n//       <Fragment>\n//         <h1 className='display-4 my-3'>Beers du Quebec </h1>\n//         <Query query={BEERS_QUERY} variables={this._getQueryVariables}>\n//           {({ loading, error, data }) => {\n//             if (loading) return <h4>Loading...</h4>\n//             if (error) console.log(error)\n//             return (\n//               <Fragment>\n//                 {data.beers.map((beer) => (\n//                   <BeerItem\n//                     key={beer.name}\n//                     beer={beer}\n//                     forPafination={this._forPafination}\n//                   />\n//                 ))}\n//               </Fragment>\n//             )\n//           }}\n//         </Query>\n//       </Fragment>\n//     )\n//   }\n// }\n// export default Beers\n\n{}\n/* <Pagination\npostsPerPage={postsPerPage}\ntotalPosts={posts.length}\npaginate={paginate}\n/> */\n// const Beers = () => {\n//   const [posts, setPosts] = useState([])\n//   const [loading, setLoading] = useState(false)\n//   const [currentPage, setCurrentPage] = useState(1)\n//   const [postsPerPage] = useState(10)\n//   useEffect(() => {\n//     const fetchPosts = async () => {\n//       setLoading(true)\n//       // const res = await axios.get('https://jsonplaceholder.typicode.com/posts')\n//       // setPosts(res.data)\n//       setLoading(false)\n//     }\n//     fetchPosts()\n//   }, [])\n//   // console.log(posts)\n//   // Get current posts\n//   const indexOfLastPost = currentPage * postsPerPage\n//   const indexOfFirstPost = indexOfLastPost - postsPerPage\n//   // Change page\n//   const paginate = (pageNumber) => setCurrentPage(pageNumber)\n//   return (\n//     <Fragment>\n//       <h1 className='display-4 my-3'>Beers du Quebec </h1>\n//       <Query query={BEERS_QUERY}>\n//         {({ loading, error, data }) => {\n//           if (loading) return <h4>Loading...</h4>\n//           if (error) console.log(error)\n//           const currentPosts = data.beers.slice(\n//             indexOfFirstPost,\n//             indexOfLastPost\n//           )\n//           console.log('data.beers in Querry', data.beers)\n//           setPosts(data.beers)\n//           return (\n//             <Fragment>\n//               {currentPosts.map((beer) => (\n//                 <BeerItem key={beer.name} beer={beer} />\n//               ))}\n//             </Fragment>\n//           )\n//         }}\n//       </Query>\n//     </Fragment>\n//   )\n// }\n// ;<button\n//   type='button'\n//   onClick={() =>\n//     fetchMore({\n//       variables: {\n//         cursor: data,\n//       },\n//       updateQuery,\n//     })\n//   }\n// >\n//   More\n// </button>\n// ;('https://jsonplaceholder.typicode.com/posts')\n// const LINKS_PER_PAGE = 5","map":{"version":3,"sources":["/Users/jonhyun/Desktop/Dev/BeerMontreal/client/src/components/Beers.js"],"names":["React","Component","Fragment","useState","useEffect","gql","Query","useQuery","BeerItem","axios","Pagination","InfiniteScroll","BEERS_QUERY","Beers","loading","error","data","beers","setBeers","sortByPrice","a","b","priceA","parseInt","price","priceB","sortByUntappd","ratingA","parseFloat","ratings","value","ratingB","sortByRatebeer","console","log","beer","sort","map","name"],"mappings":"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F,eAcE;AAAQ,IAAA,SAAS,EAAC,mBAAlB;AAAsC,IAAA,IAAI,EAAC,QAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAdF,CADF,CAFF,eAuBE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGjB,KAAK,CAACoB,GAAN,CAAU,UAACF,IAAD;AAAA,wBACT,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,IAAI,CAACG,IAApB;AAA0B,MAAA,IAAI,EAAEH,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADS;AAAA,GAAV,CADH,CAvBF,CADF;AA+BD,CAxFM,C,CA0FP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,CAMC;AALC;;;;;AAOF;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component, Fragment, useState, useEffect } from 'react'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\nimport { useQuery } from '@apollo/react-hooks'\nimport BeerItem from './BeerItem'\nimport axios from 'axios'\nimport Pagination from './Pagination'\nimport InfiniteScroll from 'react-infinite-scroll-component'\n// import InfiniteScroll from 'react-infinite-scroller'\n\nconst BEERS_QUERY = gql`\n  query BeersQuery {\n    beers {\n      abv\n      available\n      brewery\n      ibu\n      link\n      name\n      price\n      ratings {\n        name\n        value\n      }\n      style\n    }\n  }\n`\n\n// let beers = []\n// let beersWithRatebeer = []\n\nexport const Beers = () => {\n  const { loading, error, data } = useQuery(BEERS_QUERY)\n\n  const [beers, setBeers] = useState([])\n\n  const sortByPrice = (a, b) => {\n    let priceA = parseInt(a.price)\n    let priceB = parseInt(b.price)\n\n    if (priceA < priceB) {\n      return -1\n    }\n    if (priceA > priceB) {\n      return 1\n    }\n\n    return 0\n  }\n\n  const sortByUntappd = (a, b) => {\n    let ratingA = parseFloat(a.ratings[0].value)\n    let ratingB = parseFloat(b.ratings[0].value)\n\n    return ratingB - ratingA\n  }\n\n  const sortByRatebeer = (a, b) => {\n    let ratingA = 0\n    let ratingB = 0\n    if (a.ratings[1] && b.ratings[1]) {\n      ratingA = parseFloat(a.ratings[1].value)\n      ratingB = parseFloat(b.ratings[1].value)\n    }\n\n    return ratingB - ratingA\n  }\n  console.log(data)\n\n  setBeers(data)\n  console.log(beer)\n\n  if (loading) return <h4>Loading...</h4>\n  if (error) console.log(error)\n  {\n    /* beers = data.beers */\n  }\n  {\n    /* beersWithRatebeer = beers.filter(\n            (beer) => beer.ratings[1] !== undefined\n          ) */\n  }\n  {\n    /* beersWithRatebeer.sort(sortByRatebeer)\n\n          console.log(beersWithRatebeer) */\n  }\n\n  return (\n    <Fragment>\n      <h1 className='display-4 my-3'>Beers du Quebec </h1>\n      <nav className='nav'>\n        <form className='form-inline'>\n          <button className='btn btn-primary' type='button'>\n            By Price\n          </button>\n          <button\n            className='btn btn-secondary'\n            type='button'\n            onClick={() => {\n              beers.sort(sortByUntappd)\n              console.log('adfadf')\n            }}\n          >\n            By Untappd\n          </button>\n          <button className='btn btn-secondary' type='button'>\n            By Ratebeer\n          </button>\n        </form>\n      </nav>\n\n      <Fragment>\n        {beers.map((beer) => (\n          <BeerItem key={beer.name} beer={beer} />\n        ))}\n      </Fragment>\n    </Fragment>\n  )\n}\n\n// ;<Feed\n//   entries={data.feed || []}\n//   onLoadMore={() =>\n//     fetchMore({\n//       variables: {\n//         offset: data.feed.length,\n//       },\n//       updateQuery: (prev, { fetchMoreResult }) => {\n//         if (!fetchMoreResult) return prev\n//         return Object.assign({}, prev, {\n//           feed: [...prev.feed, ...fetchMoreResult.feed],\n//         })\n//       },\n//     })\n//   }\n// />\n\n// const FeedWithData = ({ match }) => (\n//   <Query\n//     query={FEED_QUERY}\n//     variables={{\n//       type: match.params.type.toUpperCase() || 'TOP',\n//       offset: 0,\n//       limit: 10,\n//     }}\n//     fetchPolicy='cache-and-network'\n//   >\n//     {({ data, fetchMore }) => (\n//       <Feed\n//         entries={data.feed || []}\n//         onLoadMore={() =>\n//           fetchMore({\n//             variables: {\n//               offset: data.feed.length,\n//             },\n//             updateQuery: (prev, { fetchMoreResult }) => {\n//               if (!fetchMoreResult) return prev\n//               return Object.assign({}, prev, {\n//                 feed: [...prev.feed, ...fetchMoreResult.feed],\n//               })\n//             },\n//           })\n//         }\n//       />\n//     )}\n//   </Query>\n// )\n\n// export class Beers extends Component {\n//   _forPafination = (store) => {\n//     const isNewPage = this.props.location.pathname.includes('new')\n//     const page = parseInt(this.props.match.params.page, 10)\n\n//     const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0\n//     const first = isNewPage ? LINKS_PER_PAGE : 100\n//     const orderBy = isNewPage ? 'createdAt_DESC' : null\n\n//     const data = store.readQuery({\n//       query: BEERS_QUERY,\n//       variables: { first, skip, orderBy },\n//     })\n\n//     store.writeQuery({ query: BEERS_QUERY, data })\n//   }\n\n//   _getQueryVariables = () => {\n//     const page = parseInt(this.props.match.params.page, 10)\n\n//     const skip = (page - 1) * LINKS_PER_PAGE\n//     const first = LINKS_PER_PAGE\n//     const orderBy = 'createdAt_DESC'\n//     return { first, skip, orderBy }\n//   }\n\n//   render() {\n//     return (\n//       <Fragment>\n//         <h1 className='display-4 my-3'>Beers du Quebec </h1>\n\n//         <Query query={BEERS_QUERY} variables={this._getQueryVariables}>\n//           {({ loading, error, data }) => {\n//             if (loading) return <h4>Loading...</h4>\n//             if (error) console.log(error)\n\n//             return (\n//               <Fragment>\n//                 {data.beers.map((beer) => (\n//                   <BeerItem\n//                     key={beer.name}\n//                     beer={beer}\n//                     forPafination={this._forPafination}\n//                   />\n//                 ))}\n//               </Fragment>\n//             )\n//           }}\n//         </Query>\n//       </Fragment>\n//     )\n//   }\n// }\n\n// export default Beers\n\n{\n  /* <Pagination\npostsPerPage={postsPerPage}\ntotalPosts={posts.length}\npaginate={paginate}\n/> */\n}\n\n// const Beers = () => {\n//   const [posts, setPosts] = useState([])\n//   const [loading, setLoading] = useState(false)\n//   const [currentPage, setCurrentPage] = useState(1)\n//   const [postsPerPage] = useState(10)\n\n//   useEffect(() => {\n//     const fetchPosts = async () => {\n//       setLoading(true)\n//       // const res = await axios.get('https://jsonplaceholder.typicode.com/posts')\n//       // setPosts(res.data)\n//       setLoading(false)\n//     }\n\n//     fetchPosts()\n//   }, [])\n\n//   // console.log(posts)\n\n//   // Get current posts\n//   const indexOfLastPost = currentPage * postsPerPage\n//   const indexOfFirstPost = indexOfLastPost - postsPerPage\n\n//   // Change page\n//   const paginate = (pageNumber) => setCurrentPage(pageNumber)\n\n//   return (\n//     <Fragment>\n//       <h1 className='display-4 my-3'>Beers du Quebec </h1>\n\n//       <Query query={BEERS_QUERY}>\n//         {({ loading, error, data }) => {\n//           if (loading) return <h4>Loading...</h4>\n//           if (error) console.log(error)\n\n//           const currentPosts = data.beers.slice(\n//             indexOfFirstPost,\n//             indexOfLastPost\n//           )\n//           console.log('data.beers in Querry', data.beers)\n//           setPosts(data.beers)\n\n//           return (\n//             <Fragment>\n//               {currentPosts.map((beer) => (\n//                 <BeerItem key={beer.name} beer={beer} />\n//               ))}\n//             </Fragment>\n//           )\n//         }}\n//       </Query>\n//     </Fragment>\n//   )\n// }\n\n// ;<button\n//   type='button'\n//   onClick={() =>\n//     fetchMore({\n//       variables: {\n//         cursor: data,\n//       },\n//       updateQuery,\n//     })\n//   }\n// >\n//   More\n// </button>\n// ;('https://jsonplaceholder.typicode.com/posts')\n// const LINKS_PER_PAGE = 5\n"]},"metadata":{},"sourceType":"module"}