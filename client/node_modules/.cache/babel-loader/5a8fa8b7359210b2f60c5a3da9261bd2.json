{"ast":null,"code":"import _toConsumableArray from \"/Users/jonhyun/Desktop/Dev/BeerMontreal/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _taggedTemplateLiteral from \"/Users/jonhyun/Desktop/Dev/BeerMontreal/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/jonhyun/Desktop/Dev/BeerMontreal/client/src/components/Beers.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query BeersQuery {\\n    beers {\\n      abv\\n      available\\n      brewery\\n      ibu\\n      link\\n      name\\n      price\\n      ratings {\\n        name\\n        value\\n      }\\n      style\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component, Fragment, useState, useEffect } from 'react';\nimport gql from 'graphql-tag';\nimport { Query, Feed } from 'react-apollo';\nimport BeerItem from './BeerItem';\nimport axios from 'axios';\nimport Pagination from './Pagination';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nvar BEERS_QUERY = gql(_templateObject()); // 'https://jsonplaceholder.typicode.com/posts'\n// const LINKS_PER_PAGE = 5\n\nvar Beers = function Beers() {\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"display-4 my-3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, \"Beers du Quebec \"), /*#__PURE__*/React.createElement(Query, {\n    query: BEERS_QUERY,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, function (_ref) {\n    var loading = _ref.loading,\n        error = _ref.error,\n        data = _ref.data,\n        fetchMore = _ref.fetchMore;\n\n    /*#__PURE__*/\n    React.createElement(BeersQuery, {\n      entries: data.beers,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }\n    });\n    if (loading) return /*#__PURE__*/React.createElement(\"h4\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 31\n      }\n    }, \"Loading...\");\n    if (error) console.log(error);\n    console.log('data :', data);\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }, data.beers.map(function (beer) {\n      return /*#__PURE__*/React.createElement(BeerItem, {\n        key: beer.name,\n        beer: beer,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }\n      });\n    }));\n  }));\n};\n\nvar FeedWithData = function FeedWithData(_ref2) {\n  var match = _ref2.match;\n  return /*#__PURE__*/React.createElement(Query, {\n    query: FEED_QUERY,\n    variables: {\n      type: match.params.type.toUpperCase() || 'TOP',\n      offset: 0,\n      limit: 10\n    },\n    fetchPolicy: \"cache-and-network\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 3\n    }\n  }, function (_ref3) {\n    var data = _ref3.data,\n        fetchMore = _ref3.fetchMore;\n    return /*#__PURE__*/React.createElement(Feed, {\n      entries: data.feed || [],\n      onLoadMore: function onLoadMore() {\n        return fetchMore({\n          variables: {\n            offset: data.feed.length\n          },\n          updateQuery: function updateQuery(prev, _ref4) {\n            var fetchMoreResult = _ref4.fetchMoreResult;\n            if (!fetchMoreResult) return prev;\n            return Object.assign({}, prev, {\n              feed: [].concat(_toConsumableArray(prev.feed), _toConsumableArray(fetchMoreResult.feed))\n            });\n          }\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    });\n  });\n}; // export class Beers extends Component {\n//   _forPafination = (store) => {\n//     const isNewPage = this.props.location.pathname.includes('new')\n//     const page = parseInt(this.props.match.params.page, 10)\n//     const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0\n//     const first = isNewPage ? LINKS_PER_PAGE : 100\n//     const orderBy = isNewPage ? 'createdAt_DESC' : null\n//     const data = store.readQuery({\n//       query: BEERS_QUERY,\n//       variables: { first, skip, orderBy },\n//     })\n//     store.writeQuery({ query: BEERS_QUERY, data })\n//   }\n//   _getQueryVariables = () => {\n//     const page = parseInt(this.props.match.params.page, 10)\n//     const skip = (page - 1) * LINKS_PER_PAGE\n//     const first = LINKS_PER_PAGE\n//     const orderBy = 'createdAt_DESC'\n//     return { first, skip, orderBy }\n//   }\n//   render() {\n//     return (\n//       <Fragment>\n//         <h1 className='display-4 my-3'>Beers du Quebec </h1>\n//         <Query query={BEERS_QUERY} variables={this._getQueryVariables}>\n//           {({ loading, error, data }) => {\n//             if (loading) return <h4>Loading...</h4>\n//             if (error) console.log(error)\n//             return (\n//               <Fragment>\n//                 {data.beers.map((beer) => (\n//                   <BeerItem\n//                     key={beer.name}\n//                     beer={beer}\n//                     forPafination={this._forPafination}\n//                   />\n//                 ))}\n//               </Fragment>\n//             )\n//           }}\n//         </Query>\n//       </Fragment>\n//     )\n//   }\n// }\n\n\nexport default Beers; // {/* <Pagination\n// postsPerPage={postsPerPage}\n// totalPosts={posts.length}\n// paginate={paginate}\n// /> */}\n// const Beers = () => {\n//   const [posts, setPosts] = useState([])\n//   const [loading, setLoading] = useState(false)\n//   const [currentPage, setCurrentPage] = useState(1)\n//   const [postsPerPage] = useState(10)\n//   useEffect(() => {\n//     const fetchPosts = async () => {\n//       setLoading(true)\n//       // const res = await axios.get('https://jsonplaceholder.typicode.com/posts')\n//       // setPosts(res.data)\n//       setLoading(false)\n//     }\n//     fetchPosts()\n//   }, [])\n//   // console.log(posts)\n//   // Get current posts\n//   const indexOfLastPost = currentPage * postsPerPage\n//   const indexOfFirstPost = indexOfLastPost - postsPerPage\n//   // Change page\n//   const paginate = (pageNumber) => setCurrentPage(pageNumber)\n//   return (\n//     <Fragment>\n//       <h1 className='display-4 my-3'>Beers du Quebec </h1>\n//       <Query query={BEERS_QUERY}>\n//         {({ loading, error, data }) => {\n//           if (loading) return <h4>Loading...</h4>\n//           if (error) console.log(error)\n//           const currentPosts = data.beers.slice(\n//             indexOfFirstPost,\n//             indexOfLastPost\n//           )\n//           console.log('data.beers in Querry', data.beers)\n//           setPosts(data.beers)\n//           return (\n//             <Fragment>\n//               {currentPosts.map((beer) => (\n//                 <BeerItem key={beer.name} beer={beer} />\n//               ))}\n//             </Fragment>\n//           )\n//         }}\n//       </Query>\n//     </Fragment>\n//   )\n// }","map":{"version":3,"sources":["/Users/jonhyun/Desktop/Dev/BeerMontreal/client/src/components/Beers.js"],"names":["React","Component","Fragment","useState","useEffect","gql","Query","Feed","BeerItem","axios","Pagination","InfiniteScroll","BEERS_QUERY","Beers","loading","error","data","fetchMore","beers","console","log","map","beer","name","FeedWithData","match","FEED_QUERY","type","params","toUpperCase","offset","limit","feed","variables","length","updateQuery","prev","fetchMoreResult","Object","assign"],"mappings":"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","sourcesContent":["import React, { Component, Fragment, useState, useEffect } from 'react'\nimport gql from 'graphql-tag'\nimport { Query, Feed } from 'react-apollo'\nimport BeerItem from './BeerItem'\nimport axios from 'axios'\nimport Pagination from './Pagination'\nimport InfiniteScroll from 'react-infinite-scroll-component'\n\nconst BEERS_QUERY = gql`\n  query BeersQuery {\n    beers {\n      abv\n      available\n      brewery\n      ibu\n      link\n      name\n      price\n      ratings {\n        name\n        value\n      }\n      style\n    }\n  }\n`\n\n// 'https://jsonplaceholder.typicode.com/posts'\n// const LINKS_PER_PAGE = 5\n\nconst Beers = () => {\n  return (\n    <Fragment>\n      <h1 className='display-4 my-3'>Beers du Quebec </h1>\n\n      <Query query={BEERS_QUERY}>\n        {({ loading, error, data ,fetchMore}) => {\n          <BeersQuery\n          entries={data.beers}\n          \n          />\n\n\n          if (loading) return <h4>Loading...</h4>\n          if (error) console.log(error)\n          console.log('data :', data)\n          return (\n            <Fragment>\n              {data.beers.map((beer) => (\n                <BeerItem key={beer.name} beer={beer} />\n              ))}\n            </Fragment>\n          )\n        }}\n      </Query>\n    </Fragment>\n  )\n}\n\nconst FeedWithData = ({ match }) => (\n  <Query\n    query={FEED_QUERY}\n    variables={{\n      type: match.params.type.toUpperCase() || 'TOP',\n      offset: 0,\n      limit: 10,\n    }}\n    fetchPolicy='cache-and-network'\n  >\n    {({ data, fetchMore }) => (\n      <Feed\n        entries={data.feed || []}\n        onLoadMore={() =>\n          fetchMore({\n            variables: {\n              offset: data.feed.length,\n            },\n            updateQuery: (prev, { fetchMoreResult }) => {\n              if (!fetchMoreResult) return prev\n              return Object.assign({}, prev, {\n                feed: [...prev.feed, ...fetchMoreResult.feed],\n              })\n            },\n          })\n        }\n      />\n    )}\n  </Query>\n)\n\n// export class Beers extends Component {\n//   _forPafination = (store) => {\n//     const isNewPage = this.props.location.pathname.includes('new')\n//     const page = parseInt(this.props.match.params.page, 10)\n\n//     const skip = isNewPage ? (page - 1) * LINKS_PER_PAGE : 0\n//     const first = isNewPage ? LINKS_PER_PAGE : 100\n//     const orderBy = isNewPage ? 'createdAt_DESC' : null\n\n//     const data = store.readQuery({\n//       query: BEERS_QUERY,\n//       variables: { first, skip, orderBy },\n//     })\n\n//     store.writeQuery({ query: BEERS_QUERY, data })\n//   }\n\n//   _getQueryVariables = () => {\n//     const page = parseInt(this.props.match.params.page, 10)\n\n//     const skip = (page - 1) * LINKS_PER_PAGE\n//     const first = LINKS_PER_PAGE\n//     const orderBy = 'createdAt_DESC'\n//     return { first, skip, orderBy }\n//   }\n\n//   render() {\n//     return (\n//       <Fragment>\n//         <h1 className='display-4 my-3'>Beers du Quebec </h1>\n\n//         <Query query={BEERS_QUERY} variables={this._getQueryVariables}>\n//           {({ loading, error, data }) => {\n//             if (loading) return <h4>Loading...</h4>\n//             if (error) console.log(error)\n\n//             return (\n//               <Fragment>\n//                 {data.beers.map((beer) => (\n//                   <BeerItem\n//                     key={beer.name}\n//                     beer={beer}\n//                     forPafination={this._forPafination}\n//                   />\n//                 ))}\n//               </Fragment>\n//             )\n//           }}\n//         </Query>\n//       </Fragment>\n//     )\n//   }\n// }\n\nexport default Beers\n\n// {/* <Pagination\n// postsPerPage={postsPerPage}\n// totalPosts={posts.length}\n// paginate={paginate}\n// /> */}\n\n// const Beers = () => {\n//   const [posts, setPosts] = useState([])\n//   const [loading, setLoading] = useState(false)\n//   const [currentPage, setCurrentPage] = useState(1)\n//   const [postsPerPage] = useState(10)\n\n//   useEffect(() => {\n//     const fetchPosts = async () => {\n//       setLoading(true)\n//       // const res = await axios.get('https://jsonplaceholder.typicode.com/posts')\n//       // setPosts(res.data)\n//       setLoading(false)\n//     }\n\n//     fetchPosts()\n//   }, [])\n\n//   // console.log(posts)\n\n//   // Get current posts\n//   const indexOfLastPost = currentPage * postsPerPage\n//   const indexOfFirstPost = indexOfLastPost - postsPerPage\n\n//   // Change page\n//   const paginate = (pageNumber) => setCurrentPage(pageNumber)\n\n//   return (\n//     <Fragment>\n//       <h1 className='display-4 my-3'>Beers du Quebec </h1>\n\n//       <Query query={BEERS_QUERY}>\n//         {({ loading, error, data }) => {\n//           if (loading) return <h4>Loading...</h4>\n//           if (error) console.log(error)\n\n//           const currentPosts = data.beers.slice(\n//             indexOfFirstPost,\n//             indexOfLastPost\n//           )\n//           console.log('data.beers in Querry', data.beers)\n//           setPosts(data.beers)\n\n//           return (\n//             <Fragment>\n//               {currentPosts.map((beer) => (\n//                 <BeerItem key={beer.name} beer={beer} />\n//               ))}\n\n//             </Fragment>\n//           )\n//         }}\n//       </Query>\n//     </Fragment>\n//   )\n// }\n"]},"metadata":{},"sourceType":"module"}